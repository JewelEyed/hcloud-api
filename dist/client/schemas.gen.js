"use strict";
// This file is auto-generated by @hey-api/openapi-ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.change_reverse_dns_entry_for_this_server_requestSchema = exports.change_reverse_dns_entry_for_this_load_balancer_responseSchema = exports.change_reverse_dns_entry_for_this_load_balancer_requestSchema = exports.change_reverse_dns_entry_for_primary_ip_responseSchema = exports.change_reverse_dns_entry_for_primary_ip_requestSchema = exports.change_primary_ip_protection_responseSchema = exports.change_primary_ip_protection_requestSchema = exports.change_network_protection_responseSchema = exports.change_network_protection_requestSchema = exports.change_load_balancer_protection_responseSchema = exports.change_load_balancer_protection_requestSchema = exports.change_ip_range_of_network_responseSchema = exports.change_ip_range_of_network_requestSchema = exports.change_image_protection_responseSchema = exports.change_image_protection_requestSchema = exports.change_floating_ip_protection_responseSchema = exports.change_floating_ip_protection_requestSchema = exports.change_alias_ips_of_network_responseSchema = exports.change_alias_ips_of_network_requestSchema = exports.change_algorithm_responseSchema = exports.change_algorithm_requestSchema = exports.certificateSchema = exports.attach_volume_to_server_responseSchema = exports.attach_volume_to_server_requestSchema = exports.attach_server_to_network_responseSchema = exports.attach_server_to_network_requestSchema = exports.attach_load_balancer_to_network_responseSchema = exports.attach_load_balancer_to_network_requestSchema = exports.attach_iso_to_server_responseSchema = exports.attach_iso_to_server_requestSchema = exports.assign_primary_ip_to_resource_responseSchema = exports.assign_primary_ip_to_resource_requestSchema = exports.assign_floating_ip_to_server_responseSchema = exports.assign_floating_ip_to_server_requestSchema = exports.architecture_optionalSchema = exports.architectureSchema = exports.apply_to_resources_responseSchema = exports.apply_to_resources_requestSchema = exports.add_target_responseSchema = exports.add_target_requestSchema = exports.add_subnet_to_network_responseSchema = exports.add_subnet_to_network_requestSchema = exports.add_service_responseSchema = exports.add_service_requestSchema = exports.add_server_to_placement_group_responseSchema = exports.add_server_to_placement_group_requestSchema = exports.add_route_to_network_responseSchema = exports.add_route_to_network_requestSchema = exports.action_optionalSchema = exports.actionSchema = void 0;
exports.disable_backups_for_server_responseSchema = exports.detach_volume_responseSchema = exports.detach_server_from_network_responseSchema = exports.detach_server_from_network_requestSchema = exports.detach_load_balancer_from_network_responseSchema = exports.detach_load_balancer_from_network_requestSchema = exports.detach_iso_from_server_responseSchema = exports.deprecation_infoSchema = exports.delete_subnet_from_network_responseSchema = exports.delete_subnet_from_network_requestSchema = exports.delete_service_responseSchema = exports.delete_service_requestSchema = exports.delete_server_responseSchema = exports.delete_route_from_network_responseSchema = exports.delete_route_from_network_requestSchema = exports.datacenterSchema = exports.created_fromSchema = exports.create_volume_responseSchema = exports.create_volume_requestSchema = exports.create_ssh_key_responseSchema = exports.create_ssh_key_requestSchema = exports.create_server_responseSchema = exports.create_server_requestSchema = exports.create_primary_ip_responseSchema = exports.create_primary_ip_requestSchema = exports.create_placementgroup_responseSchema = exports.create_placementgroup_requestSchema = exports.create_network_responseSchema = exports.create_network_requestSchema = exports.create_load_balancer_responseSchema = exports.create_load_balancer_requestSchema = exports.create_image_from_server_responseSchema = exports.create_image_from_server_requestSchema = exports.create_floating_ip_responseSchema = exports.create_floating_ip_requestSchema = exports.create_firewall_responseSchema = exports.create_firewall_requestSchema = exports.create_certificate_responseSchema = exports.create_certificate_requestSchema = exports.change_volume_protection_responseSchema = exports.change_volume_protection_requestSchema = exports.change_type_of_server_responseSchema = exports.change_type_of_server_requestSchema = exports.change_type_of_load_balancer_responseSchema = exports.change_type_of_load_balancer_requestSchema = exports.change_server_protection_responseSchema = exports.change_server_protection_requestSchema = exports.change_reverse_dns_records_for_floating_ip_responseSchema = exports.change_reverse_dns_records_for_floating_ip_requestSchema = exports.change_reverse_dns_entry_for_this_server_responseSchema = void 0;
exports.labelsSchema = exports.label_selectorSchema = exports.iso_optionalSchema = exports.isoSchema = exports.ipv6Schema = exports.ipv4Schema = exports.ip_typeSchema = exports.image_optionalSchema = exports.imageSchema = exports.httpSchema = exports.health_statusSchema = exports.get_volume_responseSchema = exports.get_ssh_key_responseSchema = exports.get_server_type_responseSchema = exports.get_server_responseSchema = exports.get_primary_ip_responseSchema = exports.get_placementgroup_responseSchema = exports.get_network_responseSchema = exports.get_metrics_for_server_responseSchema = exports.get_metrics_for_loadbalancer_responseSchema = exports.get_location_responseSchema = exports.get_load_balancer_type_responseSchema = exports.get_load_balancer_responseSchema = exports.get_iso_responseSchema = exports.get_image_responseSchema = exports.get_floating_ip_responseSchema = exports.get_firewall_responseSchema = exports.get_datacenter_responseSchema = exports.get_certificate_responseSchema = exports.get_action_responseSchema = exports.get_action_for_volume_responseSchema = exports.get_action_for_server_responseSchema = exports.get_action_for_network_responseSchema = exports.get_action_for_load_balancer_responseSchema = exports.get_action_for_image_responseSchema = exports.get_action_for_floating_ip_responseSchema = exports.get_action_for_firewall_responseSchema = exports.get_action_for_certificate_responseSchema = exports.floating_ipSchema = exports.firewall_resource_idSchema = exports.firewall_resourceSchema = exports.firewallSchema = exports.errorSchema = exports.enable_rescue_mode_for_server_responseSchema = exports.enable_rescue_mode_for_server_requestSchema = exports.enable_public_interface_of_load_balancer_responseSchema = exports.enable_and_configure_backups_for_server_responseSchema = exports.dns_ptrSchema = exports.disable_rescue_mode_for_server_responseSchema = exports.disable_public_interface_of_load_balancer_responseSchema = void 0;
exports.remove_target_requestSchema = exports.remove_from_resources_responseSchema = exports.remove_from_resources_requestSchema = exports.remove_from_placement_group_responseSchema = exports.rebuild_server_from_image_responseSchema = exports.rebuild_server_from_image_requestSchema = exports.protectionSchema = exports.price_per_time_without_trafficSchema = exports.price_per_time_monthlySchema = exports.price_per_timeSchema = exports.priceSchema = exports.power_on_server_responseSchema = exports.power_off_server_responseSchema = exports.paginationSchema = exports.networkSchema = exports.metricsSchema = exports.metaSchema = exports.locationSchema = exports.load_balancer_typeSchema = exports.load_balancer_serviceSchema = exports.load_balancer_public_netSchema = exports.load_balancer_private_netSchema = exports.load_balancer_algorithmSchema = exports.load_balancerSchema = exports.list_volumes_responseSchema = exports.list_ssh_keys_responseSchema = exports.list_servers_responseSchema = exports.list_server_types_responseSchema = exports.list_primary_ips_responseSchema = exports.list_prices_responseSchema = exports.list_placementgroups_responseSchema = exports.list_networks_responseSchema = exports.list_locations_responseSchema = exports.list_load_balancers_responseSchema = exports.list_load_balancer_types_responseSchema = exports.list_isos_responseSchema = exports.list_images_responseSchema = exports.list_floating_ips_responseSchema = exports.list_firewalls_responseSchema = exports.list_datacenters_responseSchema = exports.list_certificates_responseSchema = exports.list_actions_responseSchema = exports.list_actions_for_volume_responseSchema = exports.list_actions_for_server_responseSchema = exports.list_actions_for_network_responseSchema = exports.list_actions_for_load_balancer_responseSchema = exports.list_actions_for_image_responseSchema = exports.list_actions_for_floating_ip_responseSchema = exports.list_actions_for_firewall_responseSchema = exports.list_actions_for_certificate_responseSchema = void 0;
exports.update_load_balancer_serviceSchema = exports.unassign_primary_ip_from_resource_responseSchema = exports.unassign_floating_ip_responseSchema = exports.targetSchema = exports.subnet_with_gatewaySchema = exports.subnetSchema = exports.ssh_keySchema = exports.soft_reboot_server_responseSchema = exports.shutdown_server_responseSchema = exports.set_rules_responseSchema = exports.set_rules_requestSchema = exports.server_typeSchema = exports.server_public_netSchema = exports.server_protectionSchema = exports.server_private_netSchema = exports.serverSchema = exports.selected_targetSchema = exports.ruleSchema = exports.routeSchema = exports.retry_issuance_or_renewal_responseSchema = exports.resource_idSchema = exports.resourceSchema = exports.resize_volume_responseSchema = exports.resize_volume_requestSchema = exports.reset_server_responseSchema = exports.reset_root_password_of_server_responseSchema = exports.request_console_for_server_responseSchema = exports.replace_volume_responseSchema = exports.replace_volume_requestSchema = exports.replace_ssh_key_responseSchema = exports.replace_ssh_key_requestSchema = exports.replace_server_responseSchema = exports.replace_server_requestSchema = exports.replace_primary_ip_responseSchema = exports.replace_primary_ip_requestSchema = exports.replace_placementgroup_responseSchema = exports.replace_placementgroup_requestSchema = exports.replace_network_responseSchema = exports.replace_network_requestSchema = exports.replace_load_balancer_responseSchema = exports.replace_load_balancer_requestSchema = exports.replace_image_responseSchema = exports.replace_image_requestSchema = exports.replace_floating_ip_responseSchema = exports.replace_floating_ip_requestSchema = exports.replace_firewall_responseSchema = exports.replace_firewall_requestSchema = exports.replace_certificate_responseSchema = exports.replace_certificate_requestSchema = exports.remove_target_responseSchema = void 0;
exports.volumeSchema = exports.update_service_responseSchema = exports.update_service_requestSchema = void 0;
exports.actionSchema = {
    properties: {
        command: {
            description: 'Command executed in the Action.',
            example: 'start_resource',
            type: 'string'
        },
        error: {
            '$ref': '#/components/schemas/error'
        },
        finished: {
            description: 'Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
            example: '2016-01-30T23:55:00+00:00',
            nullable: true,
            type: 'string'
        },
        id: {
            description: 'ID of the Action',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        progress: {
            description: 'Progress of the Action in percent.',
            example: 100,
            format: 'int32',
            type: 'integer'
        },
        resources: {
            description: 'Resources the Action relates to.',
            items: {
                '$ref': '#/components/schemas/resource'
            },
            type: 'array'
        },
        started: {
            description: 'Point in time when the Action was started (in ISO-8601 format).',
            example: '2016-01-30T23:55:00+00:00',
            type: 'string'
        },
        status: {
            description: 'Status of the Action.',
            enum: ['error', 'running', 'success'],
            type: 'string'
        }
    },
    required: ['id', 'command', 'status', 'progress', 'started', 'finished', 'resources', 'error'],
    title: 'Action',
    type: 'object',
    description: 'Actions show the results and progress of asynchronous requests to the API.'
};
exports.action_optionalSchema = {
    nullable: true,
    properties: {
        command: {
            description: 'Command executed in the Action.',
            example: 'start_resource',
            type: 'string'
        },
        error: {
            '$ref': '#/components/schemas/error'
        },
        finished: {
            description: 'Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.',
            example: '2016-01-30T23:55:00+00:00',
            nullable: true,
            type: 'string'
        },
        id: {
            description: 'ID of the Action',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        progress: {
            description: 'Progress of the Action in percent.',
            example: 100,
            format: 'int32',
            type: 'integer'
        },
        resources: {
            description: 'Resources the Action relates to.',
            items: {
                '$ref': '#/components/schemas/resource'
            },
            type: 'array'
        },
        started: {
            description: 'Point in time when the Action was started (in ISO-8601 format).',
            example: '2016-01-30T23:55:00+00:00',
            type: 'string'
        },
        status: {
            description: 'Status of the Action.',
            enum: ['error', 'running', 'success'],
            type: 'string'
        }
    },
    required: ['id', 'command', 'status', 'progress', 'started', 'finished', 'resources', 'error'],
    title: 'ActionNullable',
    type: 'object',
    description: 'Actions show the results and progress of asynchronous requests to the API.'
};
exports.add_route_to_network_requestSchema = {
    '$ref': '#/components/schemas/route'
};
exports.add_route_to_network_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/add_route'
};
exports.add_server_to_placement_group_requestSchema = {
    properties: {
        placement_group: {
            description: 'ID of Placement Group the Server should be added to',
            example: 1,
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['placement_group'],
    title: 'AddToPlacementGroupRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/add_to_placement_group'
};
exports.add_server_to_placement_group_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/add_to_placement_group'
};
exports.add_service_requestSchema = {
    '$ref': '#/components/schemas/load_balancer_service'
};
exports.add_service_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/add_service'
};
exports.add_subnet_to_network_requestSchema = {
    '$ref': '#/components/schemas/subnet'
};
exports.add_subnet_to_network_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/add_subnet'
};
exports.add_target_requestSchema = {
    properties: {
        ip: {
            description: 'IP targets where the traffic should be routed to. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only present for target type "ip".',
            properties: {
                ip: {
                    description: 'IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a Subnetwork type vswitch.',
                    example: '203.0.113.1',
                    type: 'string'
                }
            },
            required: ['ip'],
            title: 'LoadBalancerTargetIP',
            type: 'object'
        },
        label_selector: {
            '$ref': '#/components/schemas/label_selector'
        },
        server: {
            additionalProperties: false,
            description: 'Configuration for type Server, required if type is `server`',
            properties: {
                id: {
                    description: 'ID of the Server',
                    example: 80,
                    format: 'int64',
                    type: 'integer',
                    maximum: 9007199254740991
                }
            },
            required: ['id'],
            type: 'object'
        },
        type: {
            description: 'Type of the resource',
            enum: ['ip', 'label_selector', 'server'],
            type: 'string'
        },
        use_private_ip: {
            default: false,
            description: 'Use the private network IP instead of the public IP of the Server, requires the Server and Load Balancer to be in the same network.',
            example: true,
            type: 'boolean'
        }
    },
    required: ['type'],
    title: 'AddTargetRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/add_target'
};
exports.add_target_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/add_target'
};
exports.apply_to_resources_requestSchema = {
    properties: {
        apply_to: {
            description: 'Resources the Firewall should be applied to',
            items: {
                '$ref': '#/components/schemas/firewall_resource'
            },
            type: 'array'
        }
    },
    required: ['apply_to'],
    title: 'ApplyToResourcesRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/firewalls/{id}/actions/apply_to_resources'
};
exports.apply_to_resources_responseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        }
    },
    required: ['actions'],
    title: 'ActionListResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/firewalls/{id}/actions/apply_to_resources'
};
exports.architectureSchema = {
    description: 'Type of cpu architecture this image is compatible with. | Type of cpu architecture',
    enum: ['arm', 'x86'],
    example: 'x86',
    type: 'string'
};
exports.architecture_optionalSchema = {
    description: 'Type of cpu architecture this iso is compatible with. Null indicates no restriction on the architecture (wildcard).',
    enum: ['arm', 'x86'],
    example: 'x86',
    nullable: true,
    type: 'string'
};
exports.assign_floating_ip_to_server_requestSchema = {
    description: 'Request for POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/assign',
    properties: {
        server: {
            description: `[Server](#servers) the [Floating IP](#floating-ips) is assigned to.

\`null\` if not assigned.
`,
            example: 42,
            format: 'int64',
            nullable: true,
            type: 'integer'
        }
    },
    required: ['server'],
    title: 'FloatingIPActionsAssignRequest',
    type: 'object'
};
exports.assign_floating_ip_to_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/assign'
};
exports.assign_primary_ip_to_resource_requestSchema = {
    properties: {
        assignee_id: {
            description: 'ID of a resource of type `assignee_type`',
            example: 4711,
            format: 'int64',
            type: 'integer'
        },
        assignee_type: {
            description: 'Type of resource assigning the Primary IP to',
            enum: ['server'],
            example: 'server',
            type: 'string'
        }
    },
    required: ['assignee_type', 'assignee_id'],
    title: 'AssignPrimaryIPRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/assign'
};
exports.assign_primary_ip_to_resource_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/assign'
};
exports.attach_iso_to_server_requestSchema = {
    properties: {
        iso: {
            description: 'ID or name of ISO to attach to the Server as listed in GET `/isos`',
            example: 'FreeBSD-11.0-RELEASE-amd64-dvd1',
            type: 'string'
        }
    },
    required: ['iso'],
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/attach_iso'
};
exports.attach_iso_to_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/attach_iso'
};
exports.attach_load_balancer_to_network_requestSchema = {
    properties: {
        ip: {
            description: 'IP to request to be assigned to this Load Balancer; if you do not provide this then you will be auto assigned an IP address',
            example: '10.0.1.1',
            type: 'string'
        },
        network: {
            description: 'ID of an existing network to attach the Load Balancer to',
            example: 4711,
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['network'],
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/attach_to_network'
};
exports.attach_load_balancer_to_network_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/attach_to_network'
};
exports.attach_server_to_network_requestSchema = {
    properties: {
        alias_ips: {
            description: 'Additional IPs to be assigned to this Server',
            example: ['10.0.1.2'],
            items: {
                type: 'string'
            },
            type: 'array'
        },
        ip: {
            description: 'IP to request to be assigned to this Server; if you do not provide this then you will be auto assigned an IP address',
            example: '10.0.1.1',
            type: 'string'
        },
        network: {
            description: 'ID of an existing network to attach the Server to',
            example: 4711,
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['network'],
    title: 'AttachToNetworkRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/attach_to_network'
};
exports.attach_server_to_network_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/attach_to_network'
};
exports.attach_volume_to_server_requestSchema = {
    properties: {
        automount: {
            description: 'Auto-mount the Volume after attaching it',
            example: false,
            type: 'boolean'
        },
        server: {
            description: 'ID of the Server the Volume will be attached to',
            example: 43,
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['server'],
    title: 'AttachVolumeRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/volumes/{id}/actions/attach'
};
exports.attach_volume_to_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/volumes/{id}/actions/attach'
};
exports.certificateSchema = {
    properties: {
        certificate: {
            description: 'Certificate and chain in PEM format, in order so that each record directly certifies the one preceding',
            example: `-----BEGIN CERTIFICATE-----
...`,
            nullable: true,
            type: 'string'
        },
        created: {
            description: 'Point in time when the Resource was created (in ISO-8601 format).',
            example: '2016-01-30T23:55:00+00:00',
            type: 'string'
        },
        domain_names: {
            description: 'Domains and subdomains covered by the Certificate',
            example: ['example.com', 'webmail.example.com', 'www.example.com'],
            items: {
                type: 'string'
            },
            type: 'array'
        },
        fingerprint: {
            description: 'SHA256 fingerprint of the Certificate',
            example: '03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f',
            nullable: true,
            type: 'string'
        },
        id: {
            description: 'ID of the Certificate.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'Name of the Resource. Must be unique per Project.',
            example: 'my-resource',
            type: 'string'
        },
        not_valid_after: {
            description: 'Point in time when the Certificate stops being valid (in ISO-8601 format)',
            example: '2019-07-08T09:59:59+00:00',
            nullable: true,
            type: 'string'
        },
        not_valid_before: {
            description: 'Point in time when the Certificate becomes valid (in ISO-8601 format)',
            example: '2019-01-08T10:00:00+00:00',
            nullable: true,
            type: 'string'
        },
        status: {
            description: 'Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates',
            nullable: true,
            properties: {
                error: {
                    description: 'If issuance or renewal reports `failed`, this property contains information about what happened',
                    example: null,
                    nullable: true,
                    properties: {
                        code: {
                            type: 'string'
                        },
                        message: {
                            type: 'string'
                        }
                    },
                    type: 'object'
                },
                issuance: {
                    description: 'Status of the issuance process of the Certificate',
                    enum: ['completed', 'failed', 'pending'],
                    example: 'completed',
                    type: 'string'
                },
                renewal: {
                    description: 'Status of the renewal process of the Certificate.',
                    enum: ['failed', 'pending', 'scheduled', 'unavailable'],
                    example: 'scheduled',
                    type: 'string'
                }
            },
            type: 'object'
        },
        type: {
            description: 'Type of the Certificate',
            enum: ['managed', 'uploaded'],
            example: 'uploaded',
            type: 'string'
        },
        used_by: {
            description: 'Resources currently using the Certificate',
            items: {
                '$ref': '#/components/schemas/resource'
            },
            type: 'array'
        }
    },
    required: ['id', 'name', 'labels', 'certificate', 'created', 'not_valid_before', 'not_valid_after', 'domain_names', 'fingerprint', 'used_by'],
    title: 'Certificate',
    type: 'object',
    description: 'TLS/SSL Certificates prove the identity of a Server and are used to encrypt client traffic.'
};
exports.change_algorithm_requestSchema = {
    '$ref': '#/components/schemas/load_balancer_algorithm'
};
exports.change_algorithm_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_algorithm'
};
exports.change_alias_ips_of_network_requestSchema = {
    properties: {
        alias_ips: {
            description: 'New alias IPs to set for this Server',
            example: ['10.0.1.2'],
            items: {
                type: 'string'
            },
            type: 'array'
        },
        network: {
            description: 'ID of an existing Network already attached to the Server',
            example: 4711,
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['network', 'alias_ips'],
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_alias_ips'
};
exports.change_alias_ips_of_network_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_alias_ips'
};
exports.change_floating_ip_protection_requestSchema = {
    '$ref': '#/components/schemas/protection'
};
exports.change_floating_ip_protection_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/change_protection'
};
exports.change_image_protection_requestSchema = {
    properties: {
        delete: {
            description: 'If true, prevents the snapshot from being deleted',
            example: true,
            type: 'boolean'
        }
    },
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/images/{id}/actions/change_protection'
};
exports.change_image_protection_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/images/{id}/actions/change_protection'
};
exports.change_ip_range_of_network_requestSchema = {
    properties: {
        ip_range: {
            description: `IP range in CIDR block notation of the whole network.

Must span all included subnets. Must be one of the private IPv4 ranges of RFC1918.

Minimum network size is /24. We highly recommend that you pick a larger network with a /16 netmask.
`,
            example: '10.0.0.0/16',
            type: 'string'
        }
    },
    required: ['ip_range'],
    title: 'ChangeIPRangeRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/change_ip_range'
};
exports.change_ip_range_of_network_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/change_ip_range'
};
exports.change_load_balancer_protection_requestSchema = {
    properties: {
        delete: {
            description: 'If true, prevents the Load Balancer from being deleted',
            example: true,
            type: 'boolean'
        }
    },
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_protection'
};
exports.change_load_balancer_protection_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_protection'
};
exports.change_network_protection_requestSchema = {
    properties: {
        delete: {
            description: 'If true, prevents the Network from being deleted',
            example: true,
            type: 'boolean'
        }
    },
    title: 'ChangeProtectionRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/change_protection'
};
exports.change_network_protection_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/change_protection'
};
exports.change_primary_ip_protection_requestSchema = {
    properties: {
        delete: {
            description: 'If true, prevents the Primary IP from being deleted',
            example: true,
            type: 'boolean'
        }
    },
    title: 'ChangeProtectionRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/change_protection'
};
exports.change_primary_ip_protection_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/change_protection'
};
exports.change_reverse_dns_entry_for_primary_ip_requestSchema = {
    properties: {
        dns_ptr: {
            description: 'Hostname to set as a reverse DNS PTR entry, will reset to original default value if `null`',
            example: 'server02.example.com',
            nullable: true,
            type: 'string'
        },
        ip: {
            description: 'IP address for which to set the reverse DNS entry',
            example: '1.2.3.4',
            type: 'string'
        }
    },
    required: ['ip', 'dns_ptr'],
    title: 'ChangeDNSPTRRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/change_dns_ptr'
};
exports.change_reverse_dns_entry_for_primary_ip_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/change_dns_ptr'
};
exports.change_reverse_dns_entry_for_this_load_balancer_requestSchema = {
    properties: {
        dns_ptr: {
            description: 'Hostname to set as a reverse DNS PTR entry',
            example: 'lb1.example.com',
            nullable: true,
            type: 'string'
        },
        ip: {
            description: 'Public IP address for which the reverse DNS entry should be set',
            example: '1.2.3.4',
            type: 'string'
        }
    },
    required: ['ip', 'dns_ptr'],
    title: 'ChangeLoadbalancerDnsPtrRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_dns_ptr'
};
exports.change_reverse_dns_entry_for_this_load_balancer_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_dns_ptr'
};
exports.change_reverse_dns_entry_for_this_server_requestSchema = {
    properties: {
        dns_ptr: {
            description: 'Hostname to set as a reverse DNS PTR entry, reset to original value if `null`',
            example: 'server01.example.com',
            nullable: true,
            type: 'string'
        },
        ip: {
            description: 'Primary IP address for which the reverse DNS entry should be set',
            example: '1.2.3.4',
            type: 'string'
        }
    },
    required: ['ip', 'dns_ptr'],
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_dns_ptr'
};
exports.change_reverse_dns_entry_for_this_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_dns_ptr'
};
exports.change_reverse_dns_records_for_floating_ip_requestSchema = {
    '$ref': '#/components/schemas/dns_ptr'
};
exports.change_reverse_dns_records_for_floating_ip_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/change_dns_ptr'
};
exports.change_server_protection_requestSchema = {
    properties: {
        delete: {
            description: 'If true, prevents the Server from being deleted (currently delete and rebuild attribute needs to have the same value)',
            example: true,
            type: 'boolean'
        },
        rebuild: {
            description: 'If true, prevents the Server from being rebuilt (currently delete and rebuild attribute needs to have the same value)',
            example: true,
            type: 'boolean'
        }
    },
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_protection'
};
exports.change_server_protection_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_protection'
};
exports.change_type_of_load_balancer_requestSchema = {
    properties: {
        load_balancer_type: {
            description: 'ID or name of Load Balancer type the Load Balancer should migrate to',
            example: 'lb21',
            type: 'string'
        }
    },
    required: ['load_balancer_type'],
    title: 'ChangeTypeRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_type'
};
exports.change_type_of_load_balancer_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_type'
};
exports.change_type_of_server_requestSchema = {
    properties: {
        server_type: {
            description: 'ID or name of Server type the Server should migrate to',
            example: 'cx11',
            type: 'string'
        },
        upgrade_disk: {
            description: 'If false, do not upgrade the disk (this allows downgrading the Server type later)',
            example: true,
            type: 'boolean'
        }
    },
    required: ['upgrade_disk', 'server_type'],
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_type'
};
exports.change_type_of_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_type'
};
exports.change_volume_protection_requestSchema = {
    properties: {
        delete: {
            description: 'If true, prevents the Volume from being deleted',
            example: true,
            type: 'boolean'
        }
    },
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/volumes/{id}/actions/change_protection'
};
exports.change_volume_protection_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/volumes/{id}/actions/change_protection'
};
exports.create_certificate_requestSchema = {
    properties: {
        certificate: {
            description: 'Certificate and chain in PEM format, in order so that each record directly certifies the one preceding. Required for type `uploaded` Certificates.',
            example: `-----BEGIN CERTIFICATE-----
...`,
            type: 'string'
        },
        domain_names: {
            description: "Domains and subdomains that should be contained in the Certificate issued by *Let's Encrypt*. Required for type `managed` Certificates.",
            example: null,
            items: {
                type: 'string'
            },
            type: 'array'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'Name of the Certificate',
            example: 'my website cert',
            type: 'string'
        },
        private_key: {
            description: 'Certificate key in PEM format. Required for type `uploaded` Certificates.',
            example: `-----BEGIN PRIVATE KEY-----
...`,
            type: 'string'
        },
        type: {
            default: 'uploaded',
            description: "Choose between uploading a Certificate in PEM format or requesting a managed *Let's Encrypt* Certificate.",
            enum: ['managed', 'uploaded'],
            example: 'uploaded',
            type: 'string'
        }
    },
    required: ['name'],
    title: 'CreateCertificateRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/certificates'
};
exports.create_certificate_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action_optional'
        },
        certificate: {
            '$ref': '#/components/schemas/certificate'
        }
    },
    required: ['certificate'],
    title: 'CreateCertificateResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/certificates'
};
exports.create_firewall_requestSchema = {
    properties: {
        apply_to: {
            description: 'Resources the Firewall should be applied to after creation',
            items: {
                '$ref': '#/components/schemas/firewall_resource'
            },
            type: 'array'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: `Name of the Firewall.

Limited to a maximum of 128 characters.
`,
            example: 'Corporate Intranet Protection',
            type: 'string'
        },
        rules: {
            description: `Array of rules.

Limited to a maximum of 50 rules per Firewall.
`,
            example: [
                {
                    direction: 'in',
                    port: '80',
                    protocol: 'tcp',
                    source_ips: ['28.239.13.1/32', '28.239.14.0/24', 'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128']
                }
            ],
            items: {
                '$ref': '#/components/schemas/rule'
            },
            type: 'array'
        }
    },
    required: ['name'],
    title: 'CreateFirewallRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/firewalls'
};
exports.create_firewall_responseSchema = {
    properties: {
        actions: {
            example: [
                {
                    command: 'set_firewall_rules',
                    error: {
                        code: 'action_failed',
                        message: 'Action failed'
                    },
                    finished: '2016-01-30T23:56:00+00:00',
                    id: 13,
                    progress: 100,
                    resources: [
                        {
                            id: 38,
                            type: 'firewall'
                        }
                    ],
                    started: '2016-01-30T23:55:00+00:00',
                    status: 'success'
                },
                {
                    command: 'apply_firewall',
                    error: {
                        code: 'action_failed',
                        message: 'Action failed'
                    },
                    finished: '2016-01-30T23:56:00+00:00',
                    id: 14,
                    progress: 100,
                    resources: [
                        {
                            id: 42,
                            type: 'server'
                        },
                        {
                            id: 38,
                            type: 'firewall'
                        }
                    ],
                    started: '2016-01-30T23:55:00+00:00',
                    status: 'success'
                }
            ],
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        },
        firewall: {
            '$ref': '#/components/schemas/firewall'
        }
    },
    title: 'CreateFirewallResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/firewalls'
};
exports.create_floating_ip_requestSchema = {
    properties: {
        description: {
            description: 'Description of the Resource.',
            example: 'This describes my resource',
            nullable: true,
            type: 'string'
        },
        home_location: {
            description: `Home [Location](#locations) for the [Floating IP](#floating-ips).

Either the ID or the name of the [Location](#locations).

Only optional if no [Server](#servers) is provided. Routing is optimized for this [Locations](#locations).
`,
            example: 'fsn1',
            type: 'string'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'Name of the Resource. Must be unique per Project.',
            example: 'my-resource',
            type: 'string'
        },
        server: {
            description: `[Server](#servers) the [Floating IP](#floating-ips) is assigned to.

\`null\` if not assigned.
`,
            example: 42,
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        type: {
            '$ref': '#/components/schemas/ip_type'
        }
    },
    required: ['type'],
    title: 'FloatingIPCreateRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/floating_ips'
};
exports.create_floating_ip_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        },
        floating_ip: {
            '$ref': '#/components/schemas/floating_ip'
        }
    },
    required: ['floating_ip'],
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/floating_ips'
};
exports.create_image_from_server_requestSchema = {
    properties: {
        description: {
            description: 'Description of the Image, will be auto-generated if not set',
            example: 'my image',
            type: 'string'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        type: {
            default: 'snapshot',
            description: 'Type of Image to create.',
            enum: ['backup', 'snapshot'],
            example: 'snapshot',
            type: 'string'
        }
    },
    title: 'CreateImageRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/create_image'
};
exports.create_image_from_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        },
        image: {
            '$ref': '#/components/schemas/image'
        }
    },
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/create_image'
};
exports.create_load_balancer_requestSchema = {
    properties: {
        algorithm: {
            '$ref': '#/components/schemas/load_balancer_algorithm'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        load_balancer_type: {
            description: 'ID or name of the Load Balancer type this Load Balancer should be created with',
            example: 'lb11',
            type: 'string'
        },
        location: {
            description: 'ID or name of Location to create Load Balancer in',
            type: 'string'
        },
        name: {
            description: 'Name of the Load Balancer',
            example: 'Web Frontend',
            type: 'string'
        },
        network: {
            description: 'ID of the network the Load Balancer should be attached to on creation',
            example: 123,
            format: 'int64',
            type: 'integer'
        },
        network_zone: {
            description: 'Name of network zone',
            example: 'eu-central',
            type: 'string'
        },
        public_interface: {
            description: 'Enable or disable the public interface of the Load Balancer',
            example: true,
            type: 'boolean'
        },
        services: {
            description: 'Array of services',
            items: {
                '$ref': '#/components/schemas/load_balancer_service'
            },
            type: 'array'
        },
        targets: {
            description: 'Array of targets',
            items: {
                '$ref': '#/components/schemas/target'
            },
            type: 'array'
        }
    },
    required: ['name', 'load_balancer_type'],
    title: 'CreateLoadBalancerRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/load_balancers'
};
exports.create_load_balancer_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        },
        load_balancer: {
            '$ref': '#/components/schemas/load_balancer'
        }
    },
    required: ['load_balancer', 'action'],
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers'
};
exports.create_network_requestSchema = {
    properties: {
        expose_routes_to_vswitch: {
            description: `Toggle to expose routes to the networks vSwitch.

Indicates if the routes from this network should be exposed to the vSwitch in this network. Only takes effect if a vSwitch is setup in this network.
`,
            example: false,
            type: 'boolean'
        },
        ip_range: {
            description: `IP range in CIDR block notation of the whole network.

Must span all included subnets. Must be one of the private IPv4 ranges of RFC1918.

Minimum network size is /24. We highly recommend that you pick a larger network with a /16 netmask.
`,
            example: '10.0.0.0/16',
            type: 'string'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'Name of the network',
            example: 'mynet',
            type: 'string'
        },
        routes: {
            description: 'Array of routes set in this network.',
            items: {
                '$ref': '#/components/schemas/route'
            },
            type: 'array'
        },
        subnets: {
            description: 'Array of subnets allocated.',
            items: {
                '$ref': '#/components/schemas/subnet'
            },
            type: 'array'
        }
    },
    required: ['name', 'ip_range'],
    title: 'NetworkCreateRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/networks'
};
exports.create_network_responseSchema = {
    properties: {
        network: {
            '$ref': '#/components/schemas/network'
        }
    },
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/networks'
};
exports.create_placementgroup_requestSchema = {
    properties: {
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'Name of the PlacementGroup',
            example: 'my Placement Group',
            type: 'string'
        },
        type: {
            description: 'Define the Placement Group Type.',
            enum: ['spread'],
            example: 'spread',
            type: 'string'
        }
    },
    required: ['name', 'type'],
    title: 'CreatePlacementGroupRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/placement_groups'
};
exports.create_placementgroup_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action_optional'
        },
        placement_group: {
            properties: {
                created: {
                    description: 'Point in time when the Resource was created (in ISO-8601 format).',
                    example: '2016-01-30T23:55:00+00:00',
                    type: 'string'
                },
                id: {
                    description: 'ID of the Placement Group.',
                    example: 42,
                    format: 'int64',
                    maximum: 9007199254740991,
                    type: 'integer'
                },
                labels: {
                    '$ref': '#/components/schemas/labels'
                },
                name: {
                    description: 'Name of the Resource. Must be unique per Project.',
                    example: 'my-resource',
                    type: 'string'
                },
                servers: {
                    description: 'Array of IDs of Servers that are part of this Placement Group',
                    example: [42],
                    items: {
                        format: 'int64',
                        type: 'integer'
                    },
                    type: 'array'
                },
                type: {
                    description: 'Type of the Placement Group',
                    enum: ['spread'],
                    example: 'spread',
                    type: 'string'
                }
            },
            required: ['id', 'name', 'labels', 'type', 'created', 'servers'],
            title: 'PlacementGroup',
            type: 'object'
        }
    },
    required: ['placement_group'],
    title: 'CreatePlacementGroupResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/placement_groups'
};
exports.create_primary_ip_requestSchema = {
    properties: {
        assignee_id: {
            description: 'ID of the resource the Primary IP should be assigned to. Omitted if it should not be assigned.',
            example: 17,
            format: 'int64',
            type: 'integer'
        },
        assignee_type: {
            description: 'Resource type the Primary IP can be assigned to',
            enum: ['server'],
            example: 'server',
            type: 'string'
        },
        auto_delete: {
            default: false,
            description: 'Delete the Primary IP when the Server it is assigned to is deleted.',
            example: false,
            type: 'boolean'
        },
        datacenter: {
            description: 'ID or name of Datacenter the Primary IP will be bound to. Needs to be omitted if `assignee_id` is passed.',
            example: 'fsn1-dc8',
            type: 'string'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            example: 'my-ip',
            type: 'string'
        },
        type: {
            '$ref': '#/components/schemas/ip_type'
        }
    },
    required: ['name', 'type', 'assignee_type'],
    title: 'CreatePrimaryIPRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/primary_ips'
};
exports.create_primary_ip_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        },
        primary_ip: {
            properties: {
                assignee_id: {
                    description: 'ID of the resource the Primary IP is assigned to, null if it is not assigned at all',
                    example: 17,
                    format: 'int64',
                    nullable: true,
                    type: 'integer'
                },
                assignee_type: {
                    description: 'Resource type the Primary IP can be assigned to',
                    enum: ['server'],
                    type: 'string'
                },
                auto_delete: {
                    description: 'Delete this Primary IP when the resource it is assigned to is deleted',
                    example: true,
                    type: 'boolean'
                },
                blocked: {
                    description: 'Whether the IP is blocked',
                    example: false,
                    type: 'boolean'
                },
                created: {
                    description: 'Point in time when the Resource was created (in ISO-8601 format).',
                    example: '2016-01-30T23:55:00+00:00',
                    type: 'string'
                },
                datacenter: {
                    '$ref': '#/components/schemas/datacenter'
                },
                dns_ptr: {
                    description: 'Array of reverse DNS entries',
                    items: {
                        '$ref': '#/components/schemas/dns_ptr'
                    },
                    type: 'array'
                },
                id: {
                    description: 'ID of the Primary IP.',
                    example: 42,
                    format: 'int64',
                    maximum: 9007199254740991,
                    type: 'integer'
                },
                ip: {
                    description: 'IP address.',
                    example: '131.232.99.1',
                    type: 'string'
                },
                labels: {
                    '$ref': '#/components/schemas/labels'
                },
                name: {
                    description: 'Name of the Resource. Must be unique per Project.',
                    example: 'my-resource',
                    type: 'string'
                },
                protection: {
                    '$ref': '#/components/schemas/protection'
                },
                type: {
                    '$ref': '#/components/schemas/ip_type'
                }
            },
            required: ['id', 'name', 'labels', 'created', 'blocked', 'datacenter', 'ip', 'dns_ptr', 'protection', 'type', 'auto_delete', 'assignee_type', 'assignee_id'],
            title: 'PrimaryIP',
            type: 'object'
        }
    },
    required: ['primary_ip'],
    title: 'CreatePrimaryIPResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/primary_ips'
};
exports.create_server_requestSchema = {
    properties: {
        automount: {
            description: 'Auto-mount Volumes after attach',
            example: false,
            type: 'boolean'
        },
        datacenter: {
            description: 'ID or name of Datacenter to create Server in (must not be used together with location)',
            example: 'nbg1-dc3',
            type: 'string'
        },
        firewalls: {
            description: "Firewalls which should be applied on the Server's public network interface at creation time",
            example: [
                {
                    firewall: 38
                }
            ],
            items: {
                properties: {
                    firewall: {
                        description: 'ID of the Firewall',
                        format: 'int64',
                        type: 'integer'
                    }
                },
                required: ['firewall'],
                type: 'object',
                title: 'CreateServerRequestFirewalls'
            },
            type: 'array'
        },
        image: {
            description: 'ID or name of the Image the Server is created from',
            example: 'ubuntu-20.04',
            type: 'string'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        location: {
            description: 'ID or name of Location to create Server in (must not be used together with datacenter)',
            example: 'nbg1',
            type: 'string'
        },
        name: {
            description: 'Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)',
            example: 'my-server',
            type: 'string'
        },
        networks: {
            description: 'Network IDs which should be attached to the Server private network interface at the creation time',
            example: [456],
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        },
        placement_group: {
            description: 'ID of the Placement Group the server should be in',
            example: 1,
            format: 'int64',
            type: 'integer'
        },
        public_net: {
            description: 'Public Network options',
            properties: {
                enable_ipv4: {
                    default: true,
                    description: 'Attach an IPv4 on the public NIC. If false, no IPv4 address will be attached.',
                    type: 'boolean'
                },
                enable_ipv6: {
                    default: true,
                    description: 'Attach an IPv6 on the public NIC. If false, no IPv6 address will be attached.',
                    type: 'boolean'
                },
                ipv4: {
                    description: 'ID of the ipv4 Primary IP to use. If omitted and enable_ipv4 is true, a new ipv4 Primary IP will automatically be created.',
                    nullable: true,
                    type: 'integer'
                },
                ipv6: {
                    description: 'ID of the ipv6 Primary IP to use. If omitted and enable_ipv6 is true, a new ipv6 Primary IP will automatically be created.',
                    nullable: true,
                    type: 'integer'
                }
            },
            type: 'object'
        },
        server_type: {
            description: 'ID or name of the Server type this Server should be created with',
            example: 'cx11',
            type: 'string'
        },
        ssh_keys: {
            description: 'SSH key IDs (`integer`) or names (`string`) which should be injected into the Server at creation time',
            example: ['my-ssh-key'],
            items: {
                type: 'string'
            },
            type: 'array'
        },
        start_after_create: {
            default: true,
            description: 'This automatically triggers a [Power on a Server-Server Action](#server-actions-power-on-a-server) after the creation is finished and is returned in the `next_actions` response object.',
            example: true,
            type: 'boolean'
        },
        user_data: {
            description: 'Cloud-Init user data to use during Server creation. This field is limited to 32KiB.',
            example: `#cloud-config
runcmd:
- [touch, /root/cloud-init-worked]
`,
            type: 'string'
        },
        volumes: {
            description: 'Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.',
            example: [123],
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        }
    },
    required: ['name', 'server_type', 'image'],
    title: 'CreateServerRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/servers'
};
exports.create_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        },
        next_actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        },
        root_password: {
            description: 'Root password when no SSH keys have been specified',
            example: 'YItygq1v3GYjjMomLaKc',
            nullable: true,
            type: 'string'
        },
        server: {
            '$ref': '#/components/schemas/server'
        }
    },
    required: ['server', 'action', 'next_actions', 'root_password'],
    title: 'CreateServerResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers'
};
exports.create_ssh_key_requestSchema = {
    properties: {
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'Name of the SSH key',
            example: 'My ssh key',
            type: 'string'
        },
        public_key: {
            description: 'Public key',
            example: 'ssh-rsa AAAjjk76kgf...Xt',
            type: 'string'
        }
    },
    required: ['name', 'public_key'],
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/ssh_keys'
};
exports.create_ssh_key_responseSchema = {
    properties: {
        ssh_key: {
            '$ref': '#/components/schemas/ssh_key'
        }
    },
    required: ['ssh_key'],
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/ssh_keys'
};
exports.create_volume_requestSchema = {
    properties: {
        automount: {
            description: 'Auto-mount Volume after attach. `server` must be provided.',
            example: false,
            type: 'boolean'
        },
        format: {
            description: 'Format Volume after creation. One of: `xfs`, `ext4`',
            example: 'xfs',
            type: 'string'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        location: {
            description: 'Location to create the Volume in (can be omitted if Server is specified)',
            example: 'nbg1',
            type: 'string'
        },
        name: {
            description: 'Name of the volume',
            example: 'databases-storage',
            type: 'string'
        },
        server: {
            description: "Server to which to attach the Volume once it's created (Volume will be created in the same Location as the server)",
            format: 'int64',
            type: 'integer'
        },
        size: {
            description: 'Size of the Volume in GB',
            example: 42,
            type: 'integer'
        }
    },
    required: ['size', 'name'],
    title: 'CreateVolumeRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/volumes'
};
exports.create_volume_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        },
        next_actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        },
        volume: {
            '$ref': '#/components/schemas/volume'
        }
    },
    required: ['volume', 'action', 'next_actions'],
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/volumes'
};
exports.created_fromSchema = {
    description: 'Information about the Server the Image was created from',
    nullable: true,
    properties: {
        id: {
            description: 'ID of the Server the Image was created from',
            example: 1,
            format: 'int64',
            type: 'integer',
            maximum: 9007199254740991
        },
        name: {
            description: 'Server name at the time the Image was created',
            example: 'Server',
            type: 'string'
        }
    },
    required: ['id', 'name'],
    type: 'object'
};
exports.datacenterSchema = {
    properties: {
        description: {
            description: `Descriptive name for the [Datacenter](#datacenters).

Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier.
`,
            example: 'Falkenstein DC Park 8',
            type: 'string'
        },
        id: {
            description: 'ID of the Datacenter.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        location: {
            '$ref': '#/components/schemas/location'
        },
        name: {
            description: `Unique name for the [Datacenter](#datacenters).

Can be used as a more descriptive identifier.
`,
            example: 'fsn1-dc8',
            pattern: '^[a-z0-9]+(-?[a-z0-9]*)*$',
            type: 'string'
        },
        server_types: {
            description: `[Server Types](#server-types) supported and available in this [Datacenter](#datacenters).
`,
            properties: {
                available: {
                    description: `[Server Types](#server-types) currently available in this [Datacenter](#datacenters).

These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable
but are supported in this [Datacenter](#datacenters) are listed as \`supported\`.
`,
                    example: [1, 2, 3],
                    items: {
                        format: 'int64',
                        type: 'integer'
                    },
                    type: 'array'
                },
                available_for_migration: {
                    description: `[Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).

Existing [Servers](#servers) can be migrated to these [Server Types](#server-types).
`,
                    example: [1, 2, 3],
                    items: {
                        format: 'int64',
                        type: 'integer'
                    },
                    type: 'array'
                },
                supported: {
                    description: `List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).

These [Server Types](#server-types) are generally available in this Datacenter, but might be
temporarily out of stock.
`,
                    example: [1, 2, 3],
                    items: {
                        format: 'int64',
                        type: 'integer'
                    },
                    type: 'array'
                }
            },
            required: ['supported', 'available', 'available_for_migration'],
            type: 'object'
        }
    },
    required: ['id', 'name', 'description', 'location', 'server_types'],
    type: 'object',
    description: 'Datacenter this Primary IP is located at | Datacenter this Resource is located at'
};
exports.delete_route_from_network_requestSchema = {
    '$ref': '#/components/schemas/route'
};
exports.delete_route_from_network_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/delete_route'
};
exports.delete_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    type: 'object',
    description: 'Response to DELETE https://api.hetzner.cloud/v1/servers/{id}'
};
exports.delete_service_requestSchema = {
    properties: {
        listen_port: {
            description: 'The listen port of the service you want to delete',
            example: 443,
            type: 'integer'
        }
    },
    required: ['listen_port'],
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/delete_service'
};
exports.delete_service_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/delete_service'
};
exports.delete_subnet_from_network_requestSchema = {
    properties: {
        ip_range: {
            description: 'IP range in CIDR block notation of the Subnet to delete.',
            example: '10.0.1.0/24',
            type: 'string'
        }
    },
    required: ['ip_range'],
    title: 'DeleteSubnetRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/delete_subnet'
};
exports.delete_subnet_from_network_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/delete_subnet'
};
exports.deprecation_infoSchema = {
    description: `Describes if, when and how the resource is deprecated. If this field is
set to \`null\` the resource is not deprecated. If a value is set, it is
considered deprecated.
`,
    nullable: true,
    properties: {
        announced: {
            description: `Date of the deprecation announcement.
`,
            example: '2023-06-01T00:00:00+00:00',
            format: 'iso-8601',
            type: 'string'
        },
        unavailable_after: {
            description: `Date of the deprecated resource removal.

Once this date is reached, the resource will not be returned
by resource type "list" endpoint, and the resource can not be
used to create new resources. For example, if this is an
image, you can not create new servers with this image after
the mentioned date.
`,
            example: '2023-09-01T00:00:00+00:00',
            format: 'iso-8601',
            type: 'string'
        }
    },
    required: ['unavailable_after', 'announced'],
    title: 'DeprecationInfo',
    type: 'object'
};
exports.detach_iso_from_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/detach_iso'
};
exports.detach_load_balancer_from_network_requestSchema = {
    properties: {
        network: {
            description: 'ID of an existing network to detach the Load Balancer from',
            example: 4711,
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['network'],
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/detach_from_network'
};
exports.detach_load_balancer_from_network_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/detach_from_network'
};
exports.detach_server_from_network_requestSchema = {
    properties: {
        network: {
            description: 'ID of an existing network to detach the Server from',
            example: 4711,
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['network'],
    title: 'DetachFromNetworkRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/detach_from_network'
};
exports.detach_server_from_network_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/detach_from_network'
};
exports.detach_volume_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/volumes/{id}/actions/detach'
};
exports.disable_backups_for_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/disable_backup'
};
exports.disable_public_interface_of_load_balancer_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/disable_public_interface'
};
exports.disable_rescue_mode_for_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/disable_rescue'
};
exports.dns_ptrSchema = {
    properties: {
        dns_ptr: {
            description: `Domain Name to point to.

PTR record content used for reverse DNS.
 | DNS pointer for the specific IP address`,
            example: 'server.example.com',
            type: 'string'
        },
        ip: {
            description: `Single IPv4 or IPv6 address to create pointer for.
 | Single IPv4 or IPv6 address | Single IPv6 address of this Server for which the reverse DNS entry has been set up`,
            example: '2001:db8::1',
            type: 'string'
        }
    },
    required: ['ip', 'dns_ptr'],
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/change_dns_ptr'
};
exports.enable_and_configure_backups_for_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/enable_backup'
};
exports.enable_public_interface_of_load_balancer_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/enable_public_interface'
};
exports.enable_rescue_mode_for_server_requestSchema = {
    properties: {
        ssh_keys: {
            description: 'Array of SSH key IDs which should be injected into the rescue system.',
            example: [2323],
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        },
        type: {
            default: 'linux64',
            description: 'Type of rescue system to boot.',
            enum: ['linux64'],
            type: 'string'
        }
    },
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/enable_rescue'
};
exports.enable_rescue_mode_for_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        },
        root_password: {
            description: 'Password that will be set for this Server once the Action succeeds',
            example: 'zCWbFhnu950dUTko5f40',
            type: 'string'
        }
    },
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/enable_rescue'
};
exports.errorSchema = {
    description: 'Error message for the Action if an error occurred, otherwise null.',
    nullable: true,
    properties: {
        code: {
            description: 'Fixed error code for machines.',
            example: 'action_failed',
            type: 'string'
        },
        message: {
            description: 'Error message for humans.',
            example: 'Action failed',
            type: 'string'
        }
    },
    required: ['code', 'message'],
    type: 'object'
};
exports.firewallSchema = {
    properties: {
        applied_to: {
            items: {
                '$ref': '#/components/schemas/firewall_resource_id'
            },
            type: 'array'
        },
        created: {
            description: 'Point in time when the Resource was created (in ISO-8601 format).',
            example: '2016-01-30T23:55:00+00:00',
            type: 'string'
        },
        id: {
            description: 'ID of the Firewall.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'Name of the Resource. Must be unique per Project.',
            example: 'my-resource',
            type: 'string'
        },
        rules: {
            items: {
                properties: {
                    description: {
                        description: 'Description of the Rule',
                        maxLength: 255,
                        nullable: true,
                        type: 'string'
                    },
                    destination_ips: {
                        description: `List of permitted IPv4/IPv6 addresses for outgoing traffic (\`direction\` set to \`out\`)
in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
blocks at most.

The CIDR blocks may refer to networks (with empty host bits) or single hosts.
For example, a network could be defined with \`10.0.1.0/24\` or \`2001:db8:ff00:42::/64\`,
and a single host with \`10.0.1.1/32\` or \`2001:db8:ff00:42::8329/128\`.
Use \`0.0.0.0/0\` to allow any IPv4 addresses and \`::/0\` to allow any IPv6 addresses.
`,
                        example: [],
                        items: {
                            type: 'string'
                        },
                        type: 'array'
                    },
                    direction: {
                        description: 'Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.',
                        enum: ['in', 'out'],
                        example: 'in',
                        type: 'string'
                    },
                    port: {
                        description: 'Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.',
                        example: '80',
                        nullable: true,
                        type: 'string'
                    },
                    protocol: {
                        description: 'Type of traffic to allow',
                        enum: ['esp', 'gre', 'icmp', 'tcp', 'udp'],
                        type: 'string'
                    },
                    source_ips: {
                        description: `List of permitted IPv4/IPv6 addresses for incoming traffic (\`direction\` set to \`in\`)
in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
blocks at most.

The CIDR blocks may refer to networks (with empty host bits) or single hosts.
For example, a network could be defined with \`10.0.1.0/24\` or \`2001:db8:ff00:42::/64\`,
and a single host with \`10.0.1.1/32\` or \`2001:db8:ff00:42::8329/128\`.
Use \`0.0.0.0/0\` to allow any IPv4 addresses and \`::/0\` to allow any IPv6 addresses.
`,
                        example: ['28.239.13.1/32', '28.239.14.0/24', 'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128'],
                        items: {
                            type: 'string'
                        },
                        type: 'array'
                    }
                },
                required: ['direction', 'protocol', 'destination_ips', 'source_ips', 'port'],
                title: 'RuleResponse',
                type: 'object'
            },
            type: 'array'
        }
    },
    required: ['id', 'name', 'created', 'rules', 'applied_to'],
    title: 'FirewallResponse',
    type: 'object',
    description: 'Firewalls can limit the network access to or from your resources.'
};
exports.firewall_resourceSchema = {
    properties: {
        label_selector: {
            '$ref': '#/components/schemas/label_selector'
        },
        server: {
            '$ref': '#/components/schemas/resource_id'
        },
        type: {
            description: 'Type of the resource',
            enum: ['label_selector', 'server'],
            type: 'string'
        }
    },
    required: ['type'],
    type: 'object',
    description: 'Resource a Firewall should be applied to.'
};
exports.firewall_resource_idSchema = {
    properties: {
        applied_to_resources: {
            items: {
                properties: {
                    server: {
                        '$ref': '#/components/schemas/resource_id'
                    },
                    type: {
                        description: 'Type of resource referenced',
                        enum: ['server'],
                        example: 'server',
                        type: 'string'
                    }
                },
                type: 'object',
                title: 'FirewallResourceIdAppliedToResources'
            },
            type: 'array'
        },
        label_selector: {
            '$ref': '#/components/schemas/label_selector'
        },
        server: {
            '$ref': '#/components/schemas/resource_id'
        },
        type: {
            description: 'Type of resource referenced',
            enum: ['label_selector', 'server'],
            example: 'server',
            type: 'string'
        }
    },
    required: ['type'],
    type: 'object',
    description: 'Resource a Firewall should be applied to.'
};
exports.floating_ipSchema = {
    properties: {
        blocked: {
            description: 'Indicates whether the [Floating IP](#floating-ips) is blocked.',
            example: false,
            type: 'boolean'
        },
        created: {
            description: 'Point in time when the Resource was created (in ISO-8601 format).',
            example: '2016-01-30T23:55:00+00:00',
            type: 'string'
        },
        description: {
            description: 'Description of the Resource.',
            example: 'This describes my resource',
            nullable: true,
            type: 'string'
        },
        dns_ptr: {
            description: `List of reverse DNS entries for the [Floating IP](#floating-ips)
`,
            items: {
                '$ref': '#/components/schemas/dns_ptr'
            },
            type: 'array'
        },
        home_location: {
            '$ref': '#/components/schemas/location'
        },
        id: {
            description: 'ID of the Floating IP.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        ip: {
            description: 'IP address.',
            example: '131.232.99.1',
            type: 'string'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'Name of the Resource. Must be unique per Project.',
            example: 'my-resource',
            type: 'string'
        },
        protection: {
            '$ref': '#/components/schemas/protection'
        },
        server: {
            description: `[Server](#servers) the [Floating IP](#floating-ips) is assigned to.

\`null\` if not assigned.
`,
            example: 42,
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        type: {
            '$ref': '#/components/schemas/ip_type'
        }
    },
    required: ['id', 'name', 'description', 'ip', 'type', 'server', 'dns_ptr', 'home_location', 'blocked', 'protection', 'labels', 'created'],
    type: 'object'
};
exports.get_action_for_certificate_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/certificates/{id}/actions/{action_id}'
};
exports.get_action_for_firewall_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/firewalls/{id}/actions/{action_id}'
};
exports.get_action_for_floating_ip_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/floating_ips/{id}/actions/{action_id}'
};
exports.get_action_for_image_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/images/{id}/actions/{action_id}'
};
exports.get_action_for_load_balancer_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/load_balancers/{id}/actions/{action_id}'
};
exports.get_action_for_network_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/networks/{id}/actions/{action_id}'
};
exports.get_action_for_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/servers/{id}/actions/{action_id}'
};
exports.get_action_for_volume_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/volumes/{id}/actions/{action_id}'
};
exports.get_action_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/{resource}/actions'
};
exports.get_certificate_responseSchema = {
    properties: {
        certificate: {
            '$ref': '#/components/schemas/certificate'
        }
    },
    required: ['certificate'],
    title: 'CertificateResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/certificates/{id}'
};
exports.get_datacenter_responseSchema = {
    properties: {
        datacenter: {
            '$ref': '#/components/schemas/datacenter'
        }
    },
    required: ['datacenter'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/datacenters/{id}'
};
exports.get_firewall_responseSchema = {
    properties: {
        firewall: {
            '$ref': '#/components/schemas/firewall'
        }
    },
    required: ['firewall'],
    title: 'FirewallResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/firewalls/{id}'
};
exports.get_floating_ip_responseSchema = {
    properties: {
        floating_ip: {
            '$ref': '#/components/schemas/floating_ip'
        }
    },
    required: ['floating_ip'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/floating_ips/{id}'
};
exports.get_image_responseSchema = {
    properties: {
        image: {
            '$ref': '#/components/schemas/image'
        }
    },
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/images/{id}'
};
exports.get_iso_responseSchema = {
    properties: {
        iso: {
            '$ref': '#/components/schemas/iso'
        }
    },
    required: ['iso'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/isos/{id}'
};
exports.get_load_balancer_responseSchema = {
    properties: {
        load_balancer: {
            '$ref': '#/components/schemas/load_balancer'
        }
    },
    required: ['load_balancer'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/load_balancers/{id}'
};
exports.get_load_balancer_type_responseSchema = {
    properties: {
        load_balancer_type: {
            '$ref': '#/components/schemas/load_balancer_type'
        }
    },
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/load_balancer_types/{id}'
};
exports.get_location_responseSchema = {
    properties: {
        location: {
            '$ref': '#/components/schemas/location'
        }
    },
    required: ['location'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/locations/{id}'
};
exports.get_metrics_for_loadbalancer_responseSchema = {
    properties: {
        metrics: {
            '$ref': '#/components/schemas/metrics'
        }
    },
    required: ['metrics'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/load_balancers/{id}/metrics'
};
exports.get_metrics_for_server_responseSchema = {
    properties: {
        metrics: {
            '$ref': '#/components/schemas/metrics'
        }
    },
    required: ['metrics'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/servers/{id}/metrics'
};
exports.get_network_responseSchema = {
    properties: {
        network: {
            '$ref': '#/components/schemas/network'
        }
    },
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/networks/{id}'
};
exports.get_placementgroup_responseSchema = {
    properties: {
        placement_group: {
            properties: {
                created: {
                    description: 'Point in time when the Resource was created (in ISO-8601 format).',
                    example: '2016-01-30T23:55:00+00:00',
                    type: 'string'
                },
                id: {
                    description: 'ID of the Placement Group.',
                    example: 42,
                    format: 'int64',
                    maximum: 9007199254740991,
                    type: 'integer'
                },
                labels: {
                    '$ref': '#/components/schemas/labels'
                },
                name: {
                    description: 'Name of the Resource. Must be unique per Project.',
                    example: 'my-resource',
                    type: 'string'
                },
                servers: {
                    description: 'Array of IDs of Servers that are part of this Placement Group',
                    example: [42],
                    items: {
                        format: 'int64',
                        type: 'integer'
                    },
                    type: 'array'
                },
                type: {
                    description: 'Type of the Placement Group',
                    enum: ['spread'],
                    example: 'spread',
                    type: 'string'
                }
            },
            required: ['id', 'name', 'labels', 'type', 'created', 'servers'],
            title: 'PlacementGroup',
            type: 'object'
        }
    },
    required: ['placement_group'],
    title: 'PlacementGroupResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/placement_groups/{id}'
};
exports.get_primary_ip_responseSchema = {
    properties: {
        primary_ip: {
            properties: {
                assignee_id: {
                    description: 'ID of the resource the Primary IP is assigned to, null if it is not assigned at all',
                    example: 17,
                    format: 'int64',
                    nullable: true,
                    type: 'integer'
                },
                assignee_type: {
                    description: 'Resource type the Primary IP can be assigned to',
                    enum: ['server'],
                    type: 'string'
                },
                auto_delete: {
                    description: 'Delete this Primary IP when the resource it is assigned to is deleted',
                    example: true,
                    type: 'boolean'
                },
                blocked: {
                    description: 'Whether the IP is blocked',
                    example: false,
                    type: 'boolean'
                },
                created: {
                    description: 'Point in time when the Resource was created (in ISO-8601 format).',
                    example: '2016-01-30T23:55:00+00:00',
                    type: 'string'
                },
                datacenter: {
                    '$ref': '#/components/schemas/datacenter'
                },
                dns_ptr: {
                    description: 'Array of reverse DNS entries',
                    items: {
                        '$ref': '#/components/schemas/dns_ptr'
                    },
                    type: 'array'
                },
                id: {
                    description: 'ID of the Primary IP.',
                    example: 42,
                    format: 'int64',
                    maximum: 9007199254740991,
                    type: 'integer'
                },
                ip: {
                    description: 'IP address.',
                    example: '131.232.99.1',
                    type: 'string'
                },
                labels: {
                    '$ref': '#/components/schemas/labels'
                },
                name: {
                    description: 'Name of the Resource. Must be unique per Project.',
                    example: 'my-resource',
                    type: 'string'
                },
                protection: {
                    '$ref': '#/components/schemas/protection'
                },
                type: {
                    '$ref': '#/components/schemas/ip_type'
                }
            },
            required: ['id', 'name', 'labels', 'created', 'blocked', 'datacenter', 'ip', 'dns_ptr', 'protection', 'type', 'auto_delete', 'assignee_type', 'assignee_id'],
            title: 'PrimaryIP',
            type: 'object'
        }
    },
    required: ['primary_ip'],
    title: 'PrimaryIPResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/primary_ips/{id}'
};
exports.get_server_responseSchema = {
    properties: {
        server: {
            '$ref': '#/components/schemas/server'
        }
    },
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/servers/{id}'
};
exports.get_server_type_responseSchema = {
    properties: {
        server_type: {
            '$ref': '#/components/schemas/server_type'
        }
    },
    required: ['server_type'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/server_types/{id}'
};
exports.get_ssh_key_responseSchema = {
    properties: {
        ssh_key: {
            '$ref': '#/components/schemas/ssh_key'
        }
    },
    required: ['ssh_key'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/ssh_keys/{id}'
};
exports.get_volume_responseSchema = {
    properties: {
        volume: {
            '$ref': '#/components/schemas/volume'
        }
    },
    required: ['volume'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/volumes/{id}'
};
exports.health_statusSchema = {
    properties: {
        listen_port: {
            example: 443,
            type: 'integer'
        },
        status: {
            enum: ['healthy', 'unhealthy', 'unknown'],
            example: 'healthy',
            type: 'string'
        }
    },
    type: 'object'
};
exports.httpSchema = {
    description: 'Configuration option for protocols http and https',
    properties: {
        certificates: {
            description: 'IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is `http`.',
            example: [897],
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        },
        cookie_lifetime: {
            default: 300,
            description: 'Lifetime of the cookie used for sticky sessions (in seconds).',
            example: 300,
            type: 'integer'
        },
        cookie_name: {
            default: 'HCLBSTICKY',
            description: 'Name of the cookie used for sticky sessions.',
            example: 'HCLBSTICKY',
            type: 'string'
        },
        redirect_http: {
            default: false,
            description: 'Redirect HTTP requests to HTTPS. Only available if `protocol` is `https`.',
            example: true,
            type: 'boolean'
        },
        sticky_sessions: {
            default: false,
            description: 'Use sticky sessions. Only available if `protocol` is `http` or `https`.',
            example: true,
            type: 'boolean'
        }
    },
    title: 'LoadBalancerServiceHTTP',
    type: 'object'
};
exports.imageSchema = {
    properties: {
        architecture: {
            '$ref': '#/components/schemas/architecture'
        },
        bound_to: {
            description: 'ID of Server the Image is bound to. Only set for Images of type `backup`.',
            example: null,
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        created: {
            description: 'Point in time when the Resource was created (in ISO-8601 format).',
            example: '2016-01-30T23:55:00+00:00',
            type: 'string'
        },
        created_from: {
            '$ref': '#/components/schemas/created_from'
        },
        deleted: {
            description: 'Point in time where the Image was deleted (in ISO-8601 format)',
            example: null,
            nullable: true,
            type: 'string'
        },
        deprecated: {
            description: 'Point in time when the Image is considered to be deprecated (in ISO-8601 format)',
            example: '2018-02-28T00:00:00+00:00',
            nullable: true,
            type: 'string'
        },
        description: {
            description: 'Description of the Image',
            example: 'Ubuntu 20.04 Standard 64 bit',
            type: 'string'
        },
        disk_size: {
            description: 'Size of the disk contained in the Image in GB',
            example: 10,
            type: 'number'
        },
        id: {
            description: 'ID of the Image.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        image_size: {
            description: 'Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.',
            example: 2.3,
            nullable: true,
            type: 'number'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'Unique identifier of the Image. This value is only set for system Images.',
            example: 'ubuntu-20.04',
            nullable: true,
            type: 'string'
        },
        os_flavor: {
            description: 'Flavor of operating system contained in the Image',
            enum: ['alma', 'centos', 'debian', 'fedora', 'rocky', 'ubuntu', 'unknown'],
            example: 'ubuntu',
            type: 'string'
        },
        os_version: {
            description: 'Operating system version',
            example: '20.04',
            nullable: true,
            type: 'string'
        },
        protection: {
            '$ref': '#/components/schemas/protection'
        },
        rapid_deploy: {
            description: 'Indicates that rapid deploy of the Image is available',
            example: false,
            type: 'boolean'
        },
        status: {
            description: "Whether the Image can be used or if it's still being created or unavailable",
            enum: ['available', 'creating', 'unavailable'],
            type: 'string'
        },
        type: {
            description: 'Type of the Image',
            enum: ['app', 'backup', 'snapshot', 'system', 'temporary'],
            example: 'snapshot',
            type: 'string'
        }
    },
    required: ['id', 'type', 'status', 'name', 'description', 'image_size', 'disk_size', 'created', 'created_from', 'bound_to', 'os_flavor', 'os_version', 'protection', 'deprecated', 'deleted', 'labels', 'architecture'],
    type: 'object'
};
exports.image_optionalSchema = {
    description: 'Image the server is based on.',
    nullable: true,
    properties: {
        architecture: {
            '$ref': '#/components/schemas/architecture'
        },
        bound_to: {
            description: 'ID of Server the Image is bound to. Only set for Images of type `backup`.',
            example: null,
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        created: {
            description: 'Point in time when the Resource was created (in ISO-8601 format).',
            example: '2016-01-30T23:55:00+00:00',
            type: 'string'
        },
        created_from: {
            '$ref': '#/components/schemas/created_from'
        },
        deleted: {
            description: 'Point in time where the Image was deleted (in ISO-8601 format)',
            example: null,
            nullable: true,
            type: 'string'
        },
        deprecated: {
            description: 'Point in time when the Image is considered to be deprecated (in ISO-8601 format)',
            example: '2018-02-28T00:00:00+00:00',
            nullable: true,
            type: 'string'
        },
        description: {
            description: 'Description of the Image',
            example: 'Ubuntu 20.04 Standard 64 bit',
            type: 'string'
        },
        disk_size: {
            description: 'Size of the disk contained in the Image in GB',
            example: 10,
            type: 'number'
        },
        id: {
            description: 'ID of the Image.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        image_size: {
            description: 'Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.',
            example: 2.3,
            nullable: true,
            type: 'number'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'Unique identifier of the Image. This value is only set for system Images.',
            example: 'ubuntu-20.04',
            nullable: true,
            type: 'string'
        },
        os_flavor: {
            description: 'Flavor of operating system contained in the Image',
            enum: ['alma', 'centos', 'debian', 'fedora', 'rocky', 'ubuntu', 'unknown'],
            example: 'ubuntu',
            type: 'string'
        },
        os_version: {
            description: 'Operating system version',
            example: '20.04',
            nullable: true,
            type: 'string'
        },
        protection: {
            '$ref': '#/components/schemas/protection'
        },
        rapid_deploy: {
            description: 'Indicates that rapid deploy of the Image is available',
            example: false,
            type: 'boolean'
        },
        status: {
            description: "Whether the Image can be used or if it's still being created or unavailable",
            enum: ['available', 'creating', 'unavailable'],
            type: 'string'
        },
        type: {
            description: 'Type of the Image',
            enum: ['app', 'backup', 'snapshot', 'system', 'temporary'],
            example: 'snapshot',
            type: 'string'
        }
    },
    required: ['id', 'type', 'status', 'name', 'description', 'image_size', 'disk_size', 'created', 'created_from', 'bound_to', 'os_flavor', 'os_version', 'protection', 'deprecated', 'deleted', 'labels', 'architecture'],
    type: 'object'
};
exports.ip_typeSchema = {
    description: 'The type of the IP',
    enum: ['ipv4', 'ipv6'],
    type: 'string'
};
exports.ipv4Schema = {
    description: 'IP address (v4) and its reverse DNS entry of this Server',
    nullable: true,
    properties: {
        blocked: {
            description: 'If the IP is blocked by our anti abuse dept',
            example: false,
            type: 'boolean'
        },
        dns_ptr: {
            description: 'Reverse DNS PTR entry for the IPv4 addresses of this Server',
            example: 'server01.example.com',
            type: 'string'
        },
        id: {
            description: 'ID of the Primary IP.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        ip: {
            description: 'IP address (v4) of this Server',
            example: '1.2.3.4',
            type: 'string'
        }
    },
    required: ['ip', 'blocked', 'dns_ptr'],
    type: 'object'
};
exports.ipv6Schema = {
    description: 'IPv6 network assigned to this Server and its reverse DNS entry',
    nullable: true,
    properties: {
        blocked: {
            description: 'If the IP is blocked by our anti abuse dept',
            example: false,
            type: 'boolean'
        },
        dns_ptr: {
            description: 'Reverse DNS PTR entries for the IPv6 addresses of this Server',
            items: {
                '$ref': '#/components/schemas/dns_ptr'
            },
            nullable: true,
            type: 'array'
        },
        id: {
            description: 'ID of the Primary IP.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        ip: {
            description: 'IP address (v6) of this Server',
            example: '2001:db8::/64',
            type: 'string'
        }
    },
    required: ['ip', 'blocked', 'dns_ptr'],
    type: 'object'
};
exports.isoSchema = {
    properties: {
        architecture: {
            '$ref': '#/components/schemas/architecture_optional'
        },
        deprecation: {
            '$ref': '#/components/schemas/deprecation_info'
        },
        description: {
            description: 'Description of the ISO',
            example: 'FreeBSD 11.0 x64',
            type: 'string'
        },
        id: {
            description: 'ID of the ISO.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        name: {
            description: 'Unique identifier of the ISO. Only set for public ISOs',
            example: 'FreeBSD-11.0-RELEASE-amd64-dvd1',
            nullable: true,
            type: 'string'
        },
        type: {
            description: 'Type of the ISO',
            enum: ['private', 'public'],
            nullable: true,
            type: 'string'
        }
    },
    required: ['id', 'name', 'description', 'type', 'deprecation', 'architecture'],
    type: 'object'
};
exports.iso_optionalSchema = {
    description: 'ISO Image that is attached to this Server. Null if no ISO is attached.',
    nullable: true,
    properties: {
        architecture: {
            '$ref': '#/components/schemas/architecture_optional'
        },
        deprecation: {
            '$ref': '#/components/schemas/deprecation_info'
        },
        description: {
            description: 'Description of the ISO',
            example: 'FreeBSD 11.0 x64',
            type: 'string'
        },
        id: {
            description: 'ID of the ISO.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        name: {
            description: 'Unique identifier of the ISO. Only set for public ISOs',
            example: 'FreeBSD-11.0-RELEASE-amd64-dvd1',
            nullable: true,
            type: 'string'
        },
        type: {
            description: 'Type of the ISO',
            enum: ['private', 'public'],
            nullable: true,
            type: 'string'
        }
    },
    required: ['id', 'name', 'description', 'type', 'deprecation', 'architecture'],
    type: 'object'
};
exports.label_selectorSchema = {
    properties: {
        selector: {
            description: 'Label selector',
            example: 'env=prod',
            type: 'string'
        }
    },
    required: ['selector'],
    type: 'object',
    description: 'Configuration for type LabelSelector, required if type is `label_selector`'
};
exports.labelsSchema = {
    additionalProperties: {
        type: 'string',
        pattern: '^(()|[a-z0-9A-Z]|([a-z0-9A-Z][a-z0-9A-Z\\._-]{0,61}[a-z0-9A-Z]))$'
    },
    description: `User-defined labels (\`key/value\` pairs) for the Resource.
For more information, see "[Labels](#labels)".
`,
    example: {
        environment: 'prod',
        'example.com/my': 'label',
        'just-a-key': ''
    },
    type: 'object'
};
exports.list_actions_for_certificate_responseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['actions', 'meta'],
    title: 'ActionListResponseWithMeta',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/certificates/{id}/actions'
};
exports.list_actions_for_firewall_responseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['actions', 'meta'],
    title: 'ActionListResponseWithMeta',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/firewalls/{id}/actions'
};
exports.list_actions_for_floating_ip_responseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['actions', 'meta'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/floating_ips/{id}/actions'
};
exports.list_actions_for_image_responseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['actions', 'meta'],
    title: 'ActionListResponseWithMeta',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/images/{id}/actions'
};
exports.list_actions_for_load_balancer_responseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['actions', 'meta'],
    title: 'ActionListResponseWithMeta',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/load_balancers/{id}/actions'
};
exports.list_actions_for_network_responseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['actions', 'meta'],
    title: 'ActionListResponseWithMeta',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/networks/{id}/actions'
};
exports.list_actions_for_server_responseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['actions', 'meta'],
    title: 'ActionListResponseWithMeta',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/servers/{id}/actions'
};
exports.list_actions_for_volume_responseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['actions', 'meta'],
    title: 'ActionListResponseWithMeta',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/volumes/{id}/actions'
};
exports.list_actions_responseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['actions', 'meta'],
    title: 'ActionListResponseWithMeta',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/{resource}/actions/{id}'
};
exports.list_certificates_responseSchema = {
    properties: {
        certificates: {
            items: {
                '$ref': '#/components/schemas/certificate'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['certificates', 'meta'],
    title: 'CertificatesResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/certificates'
};
exports.list_datacenters_responseSchema = {
    properties: {
        datacenters: {
            description: 'List of [Datacenters](#datacenters).',
            items: {
                '$ref': '#/components/schemas/datacenter'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        },
        recommendation: {
            description: 'Recommended [Datacenter](#datacenters) for creating new resources.',
            example: 1,
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['datacenters', 'recommendation', 'meta'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/datacenters'
};
exports.list_firewalls_responseSchema = {
    properties: {
        firewalls: {
            items: {
                '$ref': '#/components/schemas/firewall'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['firewalls', 'meta'],
    title: 'FirewallsResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/firewalls'
};
exports.list_floating_ips_responseSchema = {
    properties: {
        floating_ips: {
            items: {
                '$ref': '#/components/schemas/floating_ip'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['floating_ips', 'meta'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/floating_ips'
};
exports.list_images_responseSchema = {
    properties: {
        images: {
            items: {
                '$ref': '#/components/schemas/image'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['images', 'meta'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/images'
};
exports.list_isos_responseSchema = {
    properties: {
        isos: {
            items: {
                '$ref': '#/components/schemas/iso'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['isos', 'meta'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/isos'
};
exports.list_load_balancer_types_responseSchema = {
    properties: {
        load_balancer_types: {
            items: {
                '$ref': '#/components/schemas/load_balancer_type'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['load_balancer_types', 'meta'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/load_balancer_types'
};
exports.list_load_balancers_responseSchema = {
    properties: {
        load_balancers: {
            items: {
                '$ref': '#/components/schemas/load_balancer'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['load_balancers', 'meta'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/load_balancers'
};
exports.list_locations_responseSchema = {
    properties: {
        locations: {
            description: 'List of Locations.',
            items: {
                '$ref': '#/components/schemas/location'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['locations', 'meta'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/locations'
};
exports.list_networks_responseSchema = {
    properties: {
        meta: {
            '$ref': '#/components/schemas/meta'
        },
        networks: {
            items: {
                '$ref': '#/components/schemas/network'
            },
            type: 'array'
        }
    },
    required: ['networks', 'meta'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/networks'
};
exports.list_placementgroups_responseSchema = {
    properties: {
        meta: {
            '$ref': '#/components/schemas/meta'
        },
        placement_groups: {
            items: {
                properties: {
                    created: {
                        description: 'Point in time when the Resource was created (in ISO-8601 format).',
                        example: '2016-01-30T23:55:00+00:00',
                        type: 'string'
                    },
                    id: {
                        description: 'ID of the Placement Group.',
                        example: 42,
                        format: 'int64',
                        maximum: 9007199254740991,
                        type: 'integer'
                    },
                    labels: {
                        '$ref': '#/components/schemas/labels'
                    },
                    name: {
                        description: 'Name of the Resource. Must be unique per Project.',
                        example: 'my-resource',
                        type: 'string'
                    },
                    servers: {
                        description: 'Array of IDs of Servers that are part of this Placement Group',
                        example: [42],
                        items: {
                            format: 'int64',
                            type: 'integer'
                        },
                        type: 'array'
                    },
                    type: {
                        description: 'Type of the Placement Group',
                        enum: ['spread'],
                        example: 'spread',
                        type: 'string'
                    }
                },
                required: ['id', 'name', 'labels', 'type', 'created', 'servers'],
                title: 'PlacementGroup',
                type: 'object'
            },
            type: 'array'
        }
    },
    required: ['placement_groups', 'meta'],
    title: 'PlacementGroupsResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/placement_groups'
};
exports.list_prices_responseSchema = {
    properties: {
        pricing: {
            additionalProperties: false,
            properties: {
                currency: {
                    description: 'Currency the returned prices are expressed in, coded according to ISO 4217',
                    example: 'EUR',
                    type: 'string'
                },
                floating_ip: {
                    description: 'The cost of one Floating IP per month',
                    properties: {
                        price_monthly: {
                            '$ref': '#/components/schemas/price'
                        }
                    },
                    required: ['price_monthly'],
                    type: 'object'
                },
                floating_ips: {
                    description: 'Costs of Floating IPs types per Location and type',
                    items: {
                        properties: {
                            prices: {
                                description: 'Floating IP type costs per Location',
                                items: {
                                    '$ref': '#/components/schemas/price_per_time_monthly'
                                },
                                type: 'array'
                            },
                            type: {
                                '$ref': '#/components/schemas/ip_type'
                            }
                        },
                        required: ['type', 'prices'],
                        type: 'object',
                        title: 'ListPricesResponsePricingFloatingIps'
                    },
                    type: 'array'
                },
                image: {
                    description: 'The cost of Image per GB/month',
                    properties: {
                        price_per_gb_month: {
                            '$ref': '#/components/schemas/price'
                        }
                    },
                    required: ['price_per_gb_month'],
                    type: 'object'
                },
                load_balancer_types: {
                    description: 'Costs of Load Balancer types per Location and type',
                    items: {
                        properties: {
                            id: {
                                description: 'ID of the Load Balancer type the price is for',
                                example: 1,
                                format: 'int64',
                                type: 'integer',
                                maximum: 9007199254740991
                            },
                            name: {
                                description: 'Name of the Load Balancer type the price is for',
                                example: 'lb11',
                                type: 'string'
                            },
                            prices: {
                                description: 'Load Balancer type costs per Location',
                                items: {
                                    '$ref': '#/components/schemas/price_per_time'
                                },
                                type: 'array'
                            }
                        },
                        required: ['id', 'name', 'prices'],
                        type: 'object',
                        title: 'ListPricesResponsePricingLoadBalancerTypes'
                    },
                    type: 'array'
                },
                primary_ips: {
                    description: 'Costs of Primary IPs types per Location',
                    items: {
                        properties: {
                            prices: {
                                description: 'Primary IP type costs per Location',
                                items: {
                                    '$ref': '#/components/schemas/price_per_time_without_traffic'
                                },
                                type: 'array'
                            },
                            type: {
                                '$ref': '#/components/schemas/ip_type'
                            }
                        },
                        required: ['type', 'prices'],
                        type: 'object',
                        title: 'ListPricesResponsePricingPrimaryIps'
                    },
                    type: 'array'
                },
                server_backup: {
                    description: 'Will increase base Server costs by specific percentage',
                    properties: {
                        percentage: {
                            description: 'Percentage by how much the base price will increase',
                            example: '20.0000000000',
                            format: 'decimal',
                            type: 'string'
                        }
                    },
                    required: ['percentage'],
                    type: 'object'
                },
                server_types: {
                    description: 'Costs of Server types per Location and type',
                    items: {
                        properties: {
                            id: {
                                description: 'ID of the Server type the price is for',
                                example: 4,
                                format: 'int64',
                                type: 'integer',
                                maximum: 9007199254740991
                            },
                            name: {
                                description: 'Name of the Server type the price is for',
                                example: 'cx11',
                                type: 'string'
                            },
                            prices: {
                                description: 'Server type costs per Location',
                                items: {
                                    '$ref': '#/components/schemas/price_per_time'
                                },
                                type: 'array'
                            }
                        },
                        required: ['id', 'name', 'prices'],
                        type: 'object',
                        title: 'ListPricesResponsePricingServerTypes'
                    },
                    type: 'array'
                },
                traffic: {
                    deprecated: true,
                    description: `**Deprecated**: This field is deprecated and set to \`null\` since 5 August 2024.
Please refer to the \`price_per_tb_traffic\` fields in \`server_types\` and \`load_balancer_types\` instead.

Learn more about this change in [the Changelog](https://docs.hetzner.cloud/changelog#2024-07-25-cloud-api-returns-traffic-information-in-different-format).
`,
                    example: null,
                    nullable: true,
                    type: 'object'
                },
                vat_rate: {
                    description: 'The VAT rate used for calculating prices with VAT',
                    example: '19.000000',
                    format: 'decimal',
                    type: 'string'
                },
                volume: {
                    description: 'The cost of Volume per GB/month',
                    properties: {
                        price_per_gb_month: {
                            '$ref': '#/components/schemas/price'
                        }
                    },
                    required: ['price_per_gb_month'],
                    type: 'object'
                }
            },
            required: ['currency', 'vat_rate', 'image', 'floating_ip', 'floating_ips', 'traffic', 'server_backup', 'volume', 'server_types', 'load_balancer_types', 'primary_ips'],
            type: 'object'
        }
    },
    required: ['pricing'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/pricing'
};
exports.list_primary_ips_responseSchema = {
    properties: {
        meta: {
            '$ref': '#/components/schemas/meta'
        },
        primary_ips: {
            items: {
                properties: {
                    assignee_id: {
                        description: 'ID of the resource the Primary IP is assigned to, null if it is not assigned at all',
                        example: 17,
                        format: 'int64',
                        nullable: true,
                        type: 'integer'
                    },
                    assignee_type: {
                        description: 'Resource type the Primary IP can be assigned to',
                        enum: ['server'],
                        type: 'string'
                    },
                    auto_delete: {
                        description: 'Delete this Primary IP when the resource it is assigned to is deleted',
                        example: true,
                        type: 'boolean'
                    },
                    blocked: {
                        description: 'Whether the IP is blocked',
                        example: false,
                        type: 'boolean'
                    },
                    created: {
                        description: 'Point in time when the Resource was created (in ISO-8601 format).',
                        example: '2016-01-30T23:55:00+00:00',
                        type: 'string'
                    },
                    datacenter: {
                        '$ref': '#/components/schemas/datacenter'
                    },
                    dns_ptr: {
                        description: 'Array of reverse DNS entries',
                        items: {
                            '$ref': '#/components/schemas/dns_ptr'
                        },
                        type: 'array'
                    },
                    id: {
                        description: 'ID of the Primary IP.',
                        example: 42,
                        format: 'int64',
                        maximum: 9007199254740991,
                        type: 'integer'
                    },
                    ip: {
                        description: 'IP address.',
                        example: '131.232.99.1',
                        type: 'string'
                    },
                    labels: {
                        '$ref': '#/components/schemas/labels'
                    },
                    name: {
                        description: 'Name of the Resource. Must be unique per Project.',
                        example: 'my-resource',
                        type: 'string'
                    },
                    protection: {
                        '$ref': '#/components/schemas/protection'
                    },
                    type: {
                        '$ref': '#/components/schemas/ip_type'
                    }
                },
                required: ['id', 'name', 'labels', 'created', 'blocked', 'datacenter', 'ip', 'dns_ptr', 'protection', 'type', 'auto_delete', 'assignee_type', 'assignee_id'],
                title: 'PrimaryIP',
                type: 'object'
            },
            type: 'array'
        }
    },
    required: ['primary_ips', 'meta'],
    title: 'PrimaryIPsResponse',
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/primary_ips'
};
exports.list_server_types_responseSchema = {
    properties: {
        server_types: {
            items: {
                '$ref': '#/components/schemas/server_type'
            },
            type: 'array'
        },
        meta: {
            '$ref': '#/components/schemas/meta'
        }
    },
    required: ['server_types', 'meta'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/server_types'
};
exports.list_servers_responseSchema = {
    properties: {
        meta: {
            '$ref': '#/components/schemas/meta'
        },
        servers: {
            items: {
                '$ref': '#/components/schemas/server'
            },
            type: 'array'
        }
    },
    required: ['servers', 'meta'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/servers'
};
exports.list_ssh_keys_responseSchema = {
    properties: {
        meta: {
            '$ref': '#/components/schemas/meta'
        },
        ssh_keys: {
            items: {
                '$ref': '#/components/schemas/ssh_key'
            },
            type: 'array'
        }
    },
    required: ['ssh_keys', 'meta'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/ssh_keys'
};
exports.list_volumes_responseSchema = {
    properties: {
        meta: {
            '$ref': '#/components/schemas/meta'
        },
        volumes: {
            items: {
                '$ref': '#/components/schemas/volume'
            },
            type: 'array'
        }
    },
    required: ['volumes', 'meta'],
    type: 'object',
    description: 'Response to GET https://api.hetzner.cloud/v1/volumes'
};
exports.load_balancerSchema = {
    properties: {
        algorithm: {
            '$ref': '#/components/schemas/load_balancer_algorithm'
        },
        created: {
            description: 'Point in time when the Resource was created (in ISO-8601 format).',
            example: '2016-01-30T23:55:00+00:00',
            type: 'string'
        },
        id: {
            description: 'ID of the Load Balancer.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        included_traffic: {
            description: 'Free Traffic for the current billing period in bytes',
            example: 10000,
            format: 'int64',
            type: 'integer'
        },
        ingoing_traffic: {
            description: 'Inbound Traffic for the current billing period in bytes',
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        load_balancer_type: {
            '$ref': '#/components/schemas/load_balancer_type'
        },
        location: {
            '$ref': '#/components/schemas/location'
        },
        name: {
            description: 'Name of the Resource. Must be unique per Project.',
            example: 'my-resource',
            type: 'string'
        },
        outgoing_traffic: {
            description: 'Outbound Traffic for the current billing period in bytes',
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        private_net: {
            description: 'Private networks information',
            items: {
                '$ref': '#/components/schemas/load_balancer_private_net'
            },
            type: 'array'
        },
        protection: {
            '$ref': '#/components/schemas/protection'
        },
        public_net: {
            '$ref': '#/components/schemas/load_balancer_public_net'
        },
        services: {
            description: 'List of services that belong to this Load Balancer',
            items: {
                '$ref': '#/components/schemas/load_balancer_service'
            },
            type: 'array'
        },
        targets: {
            description: 'List of targets that belong to this Load Balancer',
            items: {
                '$ref': '#/components/schemas/target'
            },
            type: 'array'
        }
    },
    required: ['id', 'name', 'public_net', 'private_net', 'location', 'load_balancer_type', 'protection', 'labels', 'created', 'services', 'targets', 'algorithm', 'outgoing_traffic', 'ingoing_traffic', 'included_traffic'],
    type: 'object'
};
exports.load_balancer_algorithmSchema = {
    default: {
        type: 'round_robin'
    },
    description: 'Algorithm of the Load Balancer',
    properties: {
        type: {
            default: 'round_robin',
            description: 'Type of the algorithm.',
            enum: ['least_connections', 'round_robin'],
            type: 'string'
        }
    },
    required: ['type'],
    title: 'LoadBalancerAlgorithm',
    type: 'object'
};
exports.load_balancer_private_netSchema = {
    properties: {
        ip: {
            description: 'IP address (v4) of this Load Balancer in this Network',
            example: '10.0.0.2',
            type: 'string'
        },
        network: {
            description: 'ID of the Network',
            example: 4711,
            format: 'int64',
            type: 'integer'
        }
    },
    type: 'object'
};
exports.load_balancer_public_netSchema = {
    description: 'Public network information',
    properties: {
        enabled: {
            description: 'Public Interface enabled or not',
            type: 'boolean'
        },
        ipv4: {
            description: 'IP address (v4)',
            properties: {
                dns_ptr: {
                    description: 'Reverse DNS PTR entry for the IPv4 address of this Load Balancer',
                    example: 'lb1.example.com',
                    nullable: true,
                    type: 'string'
                },
                ip: {
                    description: 'IP address (v4) of this Load Balancer',
                    example: '1.2.3.4',
                    nullable: true,
                    type: 'string'
                }
            },
            type: 'object'
        },
        ipv6: {
            description: 'IP address (v6)',
            properties: {
                dns_ptr: {
                    description: 'Reverse DNS PTR entry for the IPv6 address of this Load Balancer',
                    example: 'lb1.example.com',
                    nullable: true,
                    type: 'string'
                },
                ip: {
                    description: 'IP address (v6) of this Load Balancer',
                    example: '2001:db8::1',
                    nullable: true,
                    type: 'string'
                }
            },
            type: 'object'
        }
    },
    required: ['enabled', 'ipv4', 'ipv6'],
    type: 'object'
};
exports.load_balancer_serviceSchema = {
    properties: {
        destination_port: {
            description: 'Port the Load Balancer will balance to',
            example: 80,
            type: 'integer'
        },
        health_check: {
            additionalProperties: false,
            description: 'Service health check',
            properties: {
                http: {
                    additionalProperties: false,
                    description: 'Additional configuration for protocol http',
                    properties: {
                        domain: {
                            description: 'Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.',
                            example: 'example.com',
                            nullable: true,
                            type: 'string'
                        },
                        path: {
                            description: 'HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.',
                            example: '/',
                            type: 'string'
                        },
                        response: {
                            description: 'String that must be contained in HTTP response in order to pass the health check',
                            example: '{"status": "ok"}',
                            type: 'string'
                        },
                        status_codes: {
                            default: ['2??', '3??'],
                            description: 'List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones.',
                            example: ['2??', '3??'],
                            items: {
                                type: 'string'
                            },
                            type: 'array'
                        },
                        tls: {
                            description: 'Use HTTPS for health check',
                            example: false,
                            type: 'boolean'
                        }
                    },
                    required: ['domain', 'path'],
                    type: 'object'
                },
                interval: {
                    description: 'Time interval in seconds health checks are performed',
                    example: 15,
                    type: 'integer'
                },
                port: {
                    description: 'Port the health check will be performed on',
                    example: 4711,
                    type: 'integer'
                },
                protocol: {
                    description: 'Type of the health check',
                    enum: ['http', 'tcp'],
                    example: 'http',
                    type: 'string'
                },
                retries: {
                    description: 'Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again',
                    example: 3,
                    type: 'integer'
                },
                timeout: {
                    description: 'Time in seconds after an attempt is considered a timeout',
                    example: 10,
                    type: 'integer'
                }
            },
            required: ['protocol', 'port', 'interval', 'timeout', 'retries'],
            title: 'LoadBalancerServiceHealthCheck',
            type: 'object'
        },
        http: {
            '$ref': '#/components/schemas/http'
        },
        listen_port: {
            description: 'Port the Load Balancer listens on',
            example: 443,
            type: 'integer'
        },
        protocol: {
            description: 'Protocol of the Load Balancer',
            enum: ['http', 'https', 'tcp'],
            example: 'https',
            type: 'string'
        },
        proxyprotocol: {
            description: 'Is Proxyprotocol enabled or not',
            example: false,
            type: 'boolean'
        }
    },
    required: ['protocol', 'listen_port', 'destination_port', 'proxyprotocol', 'health_check'],
    title: 'LoadBalancerService',
    type: 'object',
    description: 'A service for a Load Balancer.'
};
exports.load_balancer_typeSchema = {
    properties: {
        deprecated: {
            description: 'Point in time when the Load Balancer type is deprecated (in ISO-8601 format)',
            example: '2016-01-30T23:50:00+00:00',
            nullable: true,
            type: 'string'
        },
        description: {
            description: 'Description of the Load Balancer type',
            example: 'LB11',
            type: 'string'
        },
        id: {
            description: 'ID of the Load Balancer type',
            example: 1,
            format: 'int64',
            type: 'integer',
            maximum: 9007199254740991
        },
        max_assigned_certificates: {
            description: 'Number of SSL Certificates that can be assigned to a single Load Balancer',
            example: 10,
            format: 'int64',
            type: 'integer'
        },
        max_connections: {
            description: 'Number of maximum simultaneous open connections',
            example: 20000,
            format: 'int64',
            type: 'integer'
        },
        max_services: {
            description: 'Number of services a Load Balancer of this type can have',
            example: 5,
            format: 'int64',
            type: 'integer'
        },
        max_targets: {
            description: 'Number of targets a single Load Balancer can have',
            example: 25,
            format: 'int64',
            type: 'integer'
        },
        name: {
            description: 'Unique identifier of the Load Balancer type',
            example: 'lb11',
            type: 'string'
        },
        prices: {
            description: 'Prices in different network zones',
            items: {
                '$ref': '#/components/schemas/price_per_time'
            },
            type: 'array'
        }
    },
    required: ['id', 'name', 'description', 'max_connections', 'max_services', 'max_targets', 'max_assigned_certificates', 'deprecated', 'prices'],
    type: 'object'
};
exports.locationSchema = {
    description: `[Location](#locations) the [Datacenter](#datacenters) is located at.
 | [Location](#locations) the for the [Floating IP](#floating-ips) is located at.

Routing is optimized for this [Location](#locations).
 | Location of the Volume. Volume can only be attached to Servers in the same Location.`,
    properties: {
        city: {
            description: `Name of the closest city to the Location.

City name or city name and state in short form. E.g. \`Falkenstein\` or \`Ashburn, VA\`.
`,
            example: 'Falkenstein',
            type: 'string'
        },
        country: {
            description: `Country the Location resides in.

ISO 3166-1 alpha-2 code of the country.
`,
            example: 'DE',
            type: 'string'
        },
        description: {
            description: 'Humand readable description of the Location.',
            example: 'Falkenstein DC Park 1',
            type: 'string'
        },
        id: {
            description: 'ID of the Location.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        latitude: {
            description: 'Latitude of the city closest to the Location.',
            example: 50.47612,
            format: 'double',
            type: 'number'
        },
        longitude: {
            description: 'Longitude of the city closest to the Location.',
            example: 12.370071,
            format: 'double',
            type: 'number'
        },
        name: {
            description: 'Unique identifier of the Location.',
            example: 'fsn1',
            pattern: '^[a-z0-9]+(-?[a-z0-9]*)*$',
            type: 'string'
        },
        network_zone: {
            description: 'Name of the Network Zone this Location resides in.',
            example: 'eu-central',
            pattern: '^[a-z0-9]+(-?[a-z0-9]*)*$',
            type: 'string'
        }
    },
    required: ['id', 'name', 'description', 'country', 'city', 'latitude', 'longitude', 'network_zone'],
    type: 'object'
};
exports.metaSchema = {
    properties: {
        pagination: {
            '$ref': '#/components/schemas/pagination'
        }
    },
    required: ['pagination'],
    title: 'ListMeta',
    type: 'object',
    description: 'Metadata contained in the response'
};
exports.metricsSchema = {
    properties: {
        end: {
            description: 'End of period of metrics reported (in ISO-8601 format)',
            example: '2017-01-01T23:00:00+00:00',
            type: 'string'
        },
        start: {
            description: 'Start of period of metrics reported (in ISO-8601 format)',
            example: '2017-01-01T00:00:00+00:00',
            type: 'string'
        },
        step: {
            description: 'Resolution of results in seconds.',
            example: 60,
            type: 'integer'
        },
        time_series: {
            additionalProperties: {
                properties: {
                    values: {
                        description: 'Metrics Timestamps with values',
                        items: {
                            items: {
                                oneOf: [
                                    {
                                        type: 'number'
                                    },
                                    {
                                        type: 'string'
                                    }
                                ],
                                title: 'MetricsTimeSeriesValue'
                            },
                            type: 'array'
                        },
                        type: 'array'
                    }
                },
                required: ['values'],
                type: 'object'
            },
            description: 'Hash with timeseries information, containing the name of timeseries as key',
            example: {
                name_of_timeseries: {
                    values: [[1435781470.622, '42'], [1435781471.622, '43']]
                }
            },
            type: 'object',
            title: 'MetricsTimeSeries'
        }
    },
    required: ['start', 'end', 'step', 'time_series'],
    type: 'object',
    description: 'You must specify the type of metric to get: open_connections, requests_per_second or bandwidth. You can also specify more than one type by comma separation, e.g. requests_per_second,bandwidth. Depending on the type you will get different time series data.'
};
exports.networkSchema = {
    properties: {
        created: {
            description: 'Point in time when the Network was created (in ISO-8601 format)',
            example: '2016-01-30T23:50:00+00:00',
            type: 'string'
        },
        expose_routes_to_vswitch: {
            description: 'Indicates if the routes from this network should be exposed to the vSwitch connection.',
            example: false,
            type: 'boolean'
        },
        id: {
            description: 'ID of the Network',
            example: 4711,
            format: 'int64',
            type: 'integer',
            maximum: 9007199254740991
        },
        ip_range: {
            description: 'IP range in CIDR block notation of the whole network.',
            example: '10.0.0.0/16',
            type: 'string'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        load_balancers: {
            description: 'Array of IDs of Load Balancers attached to this Network',
            example: [42],
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        },
        name: {
            description: 'Name of the Network',
            example: 'mynet',
            type: 'string'
        },
        protection: {
            '$ref': '#/components/schemas/protection'
        },
        routes: {
            description: 'Array of routes set in this Network',
            items: {
                '$ref': '#/components/schemas/route'
            },
            type: 'array'
        },
        servers: {
            description: 'Array of IDs of Servers attached to this Network',
            example: [42],
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        },
        subnets: {
            description: 'Array subnets allocated in this Network',
            items: {
                '$ref': '#/components/schemas/subnet_with_gateway'
            },
            type: 'array'
        }
    },
    required: ['id', 'name', 'ip_range', 'subnets', 'routes', 'servers', 'protection', 'labels', 'created', 'expose_routes_to_vswitch'],
    type: 'object'
};
exports.paginationSchema = {
    description: 'See "[Pagination](#pagination)" for more information. | Information about the current pagination. The keys previous_page, next_page, last_page, and total_entries may be null when on the first page, last page, or when the total number of entries is unknown',
    properties: {
        last_page: {
            description: 'Page number of the last page available. Can be null if the current page is the last one. | ID of the last page available. Can be null if the current page is the last one.',
            example: 4,
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        next_page: {
            description: 'Page number of the next page. Can be null if the current page is the last one. | ID of the next page. Can be null if the current page is the last one.',
            example: 4,
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        page: {
            description: 'Current page number. | Current page number',
            example: 3,
            format: 'int64',
            type: 'integer'
        },
        per_page: {
            description: 'Maximum number of entries returned per page. | Maximum number of items shown per page in the response',
            example: 25,
            format: 'int64',
            type: 'integer'
        },
        previous_page: {
            description: 'Page number of the previous page. Can be null if the current page is the first one. | ID of the previous page. Can be null if the current page is the first one.',
            example: 2,
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        total_entries: {
            description: 'Total number of entries that exist for this query. Can be null if unknown. | The total number of entries that exist in the database for this query. Nullable if unknown.',
            example: 100,
            format: 'int64',
            nullable: true,
            type: 'integer'
        }
    },
    required: ['page', 'per_page', 'previous_page', 'next_page', 'last_page', 'total_entries'],
    type: 'object'
};
exports.power_off_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/poweroff'
};
exports.power_on_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/poweron'
};
exports.priceSchema = {
    description: 'Hourly costs for a Resource in this Location. | Monthly costs for a Resource in this Location. | The cost of additional traffic per TB. | Monthly costs for a Floating IP type in this Location | Hourly costs for a Load Balancer type in this network zone | Monthly costs for a Load Balancer type in this network zone | Hourly costs for a Primary IP type in this Location | Monthly costs for a Primary IP type in this Location | Hourly costs for a Server type in this Location | Monthly costs for a Server type in this Location',
    properties: {
        gross: {
            description: 'Price with VAT added. | Price with VAT added',
            example: '1.1900000000000000',
            format: 'decimal',
            type: 'string'
        },
        net: {
            description: 'Price without VAT. | Price without VAT',
            example: '1.0000000000',
            format: 'decimal',
            type: 'string'
        }
    },
    required: ['net', 'gross'],
    type: 'object'
};
exports.price_per_timeSchema = {
    properties: {
        included_traffic: {
            description: 'Free traffic per month in bytes.',
            example: 654321,
            format: 'int64',
            type: 'integer'
        },
        location: {
            description: 'Name of the Location the price is for. | Name of the Location the price is for',
            example: 'fsn1',
            type: 'string'
        },
        price_hourly: {
            '$ref': '#/components/schemas/price'
        },
        price_monthly: {
            '$ref': '#/components/schemas/price'
        },
        price_per_tb_traffic: {
            '$ref': '#/components/schemas/price'
        }
    },
    required: ['location', 'price_hourly', 'price_monthly', 'included_traffic', 'price_per_tb_traffic'],
    type: 'object'
};
exports.price_per_time_monthlySchema = {
    properties: {
        location: {
            description: 'Name of the Location the price is for',
            example: 'fsn1',
            type: 'string'
        },
        price_monthly: {
            '$ref': '#/components/schemas/price'
        }
    },
    required: ['location', 'price_monthly'],
    type: 'object'
};
exports.price_per_time_without_trafficSchema = {
    properties: {
        location: {
            description: 'Name of the Location the price is for',
            example: 'fsn1',
            type: 'string'
        },
        price_hourly: {
            '$ref': '#/components/schemas/price'
        },
        price_monthly: {
            '$ref': '#/components/schemas/price'
        }
    },
    required: ['location', 'price_hourly', 'price_monthly'],
    type: 'object'
};
exports.protectionSchema = {
    description: 'Protection configuration for the Resource',
    properties: {
        delete: {
            description: 'Prevent the Resource from being deleted.',
            example: false,
            type: 'boolean'
        }
    },
    required: ['delete'],
    type: 'object'
};
exports.rebuild_server_from_image_requestSchema = {
    properties: {
        image: {
            description: 'ID or name of Image to rebuilt from.',
            example: 'ubuntu-20.04',
            type: 'string'
        }
    },
    required: ['image'],
    title: 'RebuildServerRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/rebuild'
};
exports.rebuild_server_from_image_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        },
        root_password: {
            description: 'New root password when not using SSH keys',
            nullable: true,
            type: 'string'
        }
    },
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/rebuild'
};
exports.remove_from_placement_group_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/remove_from_placement_group'
};
exports.remove_from_resources_requestSchema = {
    properties: {
        remove_from: {
            description: 'Resources the Firewall should be removed from',
            items: {
                '$ref': '#/components/schemas/firewall_resource'
            },
            type: 'array'
        }
    },
    required: ['remove_from'],
    title: 'RemoveFromResourcesRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/firewalls/{id}/actions/remove_from_resources'
};
exports.remove_from_resources_responseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        }
    },
    required: ['actions'],
    title: 'ActionListResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/firewalls/{id}/actions/remove_from_resources'
};
exports.remove_target_requestSchema = {
    properties: {
        ip: {
            description: 'IP targets where the traffic should be routed to. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only present for target type "ip".',
            properties: {
                ip: {
                    description: 'IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a Subnetwork type vswitch.',
                    example: '203.0.113.1',
                    type: 'string'
                }
            },
            required: ['ip'],
            title: 'LoadBalancerTargetIP',
            type: 'object'
        },
        label_selector: {
            '$ref': '#/components/schemas/label_selector'
        },
        server: {
            additionalProperties: false,
            description: 'Configuration for type Server, required if type is `server`',
            properties: {
                id: {
                    description: 'ID of the Server',
                    example: 80,
                    format: 'int64',
                    type: 'integer',
                    maximum: 9007199254740991
                }
            },
            required: ['id'],
            type: 'object'
        },
        type: {
            description: 'Type of the resource',
            enum: ['ip', 'label_selector', 'server'],
            type: 'string'
        }
    },
    required: ['type'],
    title: 'RemoveTargetRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/remove_target'
};
exports.remove_target_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/remove_target'
};
exports.replace_certificate_requestSchema = {
    properties: {
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'New Certificate name',
            example: 'my website cert',
            type: 'string'
        }
    },
    title: 'UpdateCertificateRequest',
    type: 'object',
    description: 'Request for PUT https://api.hetzner.cloud/v1/certificates/{id}'
};
exports.replace_certificate_responseSchema = {
    properties: {
        certificate: {
            '$ref': '#/components/schemas/certificate'
        }
    },
    required: ['certificate'],
    title: 'CertificateResponse',
    type: 'object',
    description: 'Response to PUT https://api.hetzner.cloud/v1/certificates/{id}'
};
exports.replace_firewall_requestSchema = {
    properties: {
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'New Firewall name',
            example: 'new-name',
            type: 'string'
        }
    },
    title: 'UpdateFirewallRequest',
    type: 'object',
    description: 'Request for PUT https://api.hetzner.cloud/v1/firewalls/{id}'
};
exports.replace_firewall_responseSchema = {
    properties: {
        firewall: {
            '$ref': '#/components/schemas/firewall'
        }
    },
    required: ['firewall'],
    title: 'FirewallResponse',
    type: 'object',
    description: 'Response to PUT https://api.hetzner.cloud/v1/firewalls/{id}'
};
exports.replace_floating_ip_requestSchema = {
    properties: {
        description: {
            description: 'Description of the Resource.',
            example: 'This describes my resource',
            nullable: true,
            type: 'string'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'Name of the Resource. Must be unique per Project.',
            example: 'my-resource',
            type: 'string'
        }
    },
    title: 'FloatingIPUpdateRequest',
    type: 'object',
    description: 'Request for PUT https://api.hetzner.cloud/v1/floating_ips/{id}'
};
exports.replace_floating_ip_responseSchema = {
    properties: {
        floating_ip: {
            '$ref': '#/components/schemas/floating_ip'
        }
    },
    required: ['floating_ip'],
    type: 'object',
    description: 'Response to PUT https://api.hetzner.cloud/v1/floating_ips/{id}'
};
exports.replace_image_requestSchema = {
    properties: {
        description: {
            description: 'New description of Image',
            example: 'My new Image description',
            type: 'string'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        type: {
            description: 'Destination Image type to convert to',
            enum: ['snapshot'],
            type: 'string'
        }
    },
    title: 'UpdateImageRequest',
    type: 'object',
    description: 'Request for PUT https://api.hetzner.cloud/v1/images/{id}'
};
exports.replace_image_responseSchema = {
    properties: {
        image: {
            '$ref': '#/components/schemas/image'
        }
    },
    type: 'object',
    description: 'Response to PUT https://api.hetzner.cloud/v1/images/{id}'
};
exports.replace_load_balancer_requestSchema = {
    properties: {
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'New Load Balancer name',
            example: 'new-name',
            type: 'string'
        }
    },
    type: 'object',
    description: 'Request for PUT https://api.hetzner.cloud/v1/load_balancers/{id}'
};
exports.replace_load_balancer_responseSchema = {
    properties: {
        load_balancer: {
            '$ref': '#/components/schemas/load_balancer'
        }
    },
    required: ['load_balancer'],
    type: 'object',
    description: 'Response to PUT https://api.hetzner.cloud/v1/load_balancers/{id}'
};
exports.replace_network_requestSchema = {
    properties: {
        expose_routes_to_vswitch: {
            description: `Toggle to expose routes to the networks vSwitch.

Indicates if the routes from this network should be exposed to the vSwitch in this network. Only takes effect if a vSwitch is setup in this network.
`,
            example: false,
            type: 'boolean'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'New network name',
            example: 'new-name',
            type: 'string'
        }
    },
    title: 'NetworkUpdateRequest',
    type: 'object',
    description: 'Request for PUT https://api.hetzner.cloud/v1/networks/{id}'
};
exports.replace_network_responseSchema = {
    properties: {
        network: {
            '$ref': '#/components/schemas/network'
        }
    },
    type: 'object',
    description: 'Response to PUT https://api.hetzner.cloud/v1/networks/{id}'
};
exports.replace_placementgroup_requestSchema = {
    properties: {
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'New PlacementGroup name',
            example: 'my Placement Group',
            type: 'string'
        }
    },
    title: 'UpdatePlacementGroupRequest',
    type: 'object',
    description: 'Request for PUT https://api.hetzner.cloud/v1/placement_groups/{id}'
};
exports.replace_placementgroup_responseSchema = {
    properties: {
        placement_group: {
            properties: {
                created: {
                    description: 'Point in time when the Resource was created (in ISO-8601 format).',
                    example: '2016-01-30T23:55:00+00:00',
                    type: 'string'
                },
                id: {
                    description: 'ID of the Placement Group.',
                    example: 42,
                    format: 'int64',
                    maximum: 9007199254740991,
                    type: 'integer'
                },
                labels: {
                    '$ref': '#/components/schemas/labels'
                },
                name: {
                    description: 'Name of the Resource. Must be unique per Project.',
                    example: 'my-resource',
                    type: 'string'
                },
                servers: {
                    description: 'Array of IDs of Servers that are part of this Placement Group',
                    example: [42],
                    items: {
                        format: 'int64',
                        type: 'integer'
                    },
                    type: 'array'
                },
                type: {
                    description: 'Type of the Placement Group',
                    enum: ['spread'],
                    example: 'spread',
                    type: 'string'
                }
            },
            required: ['id', 'name', 'labels', 'type', 'created', 'servers'],
            title: 'PlacementGroup',
            type: 'object'
        }
    },
    required: ['placement_group'],
    title: 'PlacementGroupResponse',
    type: 'object',
    description: 'Response to PUT https://api.hetzner.cloud/v1/placement_groups/{id}'
};
exports.replace_primary_ip_requestSchema = {
    properties: {
        auto_delete: {
            description: 'Delete this Primary IP when the resource it is assigned to is deleted',
            example: true,
            type: 'boolean'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'New unique name to set',
            example: 'my-ip',
            type: 'string'
        }
    },
    title: 'UpdatePrimaryIPRequest',
    type: 'object',
    description: 'Request for PUT https://api.hetzner.cloud/v1/primary_ips/{id}'
};
exports.replace_primary_ip_responseSchema = {
    properties: {
        primary_ip: {
            properties: {
                assignee_id: {
                    description: 'ID of the resource the Primary IP is assigned to, null if it is not assigned at all',
                    example: 17,
                    format: 'int64',
                    nullable: true,
                    type: 'integer'
                },
                assignee_type: {
                    description: 'Resource type the Primary IP can be assigned to',
                    enum: ['server'],
                    type: 'string'
                },
                auto_delete: {
                    description: 'Delete this Primary IP when the resource it is assigned to is deleted',
                    example: true,
                    type: 'boolean'
                },
                blocked: {
                    description: 'Whether the IP is blocked',
                    example: false,
                    type: 'boolean'
                },
                created: {
                    description: 'Point in time when the Resource was created (in ISO-8601 format).',
                    example: '2016-01-30T23:55:00+00:00',
                    type: 'string'
                },
                datacenter: {
                    '$ref': '#/components/schemas/datacenter'
                },
                dns_ptr: {
                    description: 'Array of reverse DNS entries',
                    items: {
                        '$ref': '#/components/schemas/dns_ptr'
                    },
                    type: 'array'
                },
                id: {
                    description: 'ID of the Primary IP.',
                    example: 42,
                    format: 'int64',
                    maximum: 9007199254740991,
                    type: 'integer'
                },
                ip: {
                    description: 'IP address.',
                    example: '131.232.99.1',
                    type: 'string'
                },
                labels: {
                    '$ref': '#/components/schemas/labels'
                },
                name: {
                    description: 'Name of the Resource. Must be unique per Project.',
                    example: 'my-resource',
                    type: 'string'
                },
                protection: {
                    '$ref': '#/components/schemas/protection'
                },
                type: {
                    '$ref': '#/components/schemas/ip_type'
                }
            },
            required: ['id', 'name', 'labels', 'created', 'blocked', 'datacenter', 'ip', 'dns_ptr', 'protection', 'type', 'auto_delete', 'assignee_type', 'assignee_id'],
            title: 'PrimaryIP',
            type: 'object'
        }
    },
    required: ['primary_ip'],
    title: 'PrimaryIPResponse',
    type: 'object',
    description: 'Response to PUT https://api.hetzner.cloud/v1/primary_ips/{id}'
};
exports.replace_server_requestSchema = {
    properties: {
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'New name to set',
            example: 'my-server',
            type: 'string'
        }
    },
    title: 'UpdateServerRequest',
    type: 'object',
    description: 'Request for PUT https://api.hetzner.cloud/v1/servers/{id}'
};
exports.replace_server_responseSchema = {
    properties: {
        server: {
            '$ref': '#/components/schemas/server'
        }
    },
    type: 'object',
    description: 'Response to PUT https://api.hetzner.cloud/v1/servers/{id}'
};
exports.replace_ssh_key_requestSchema = {
    properties: {
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'New name Name to set',
            example: 'My ssh key',
            type: 'string'
        }
    },
    type: 'object',
    description: 'Request for PUT https://api.hetzner.cloud/v1/ssh_keys/{id}'
};
exports.replace_ssh_key_responseSchema = {
    properties: {
        ssh_key: {
            '$ref': '#/components/schemas/ssh_key'
        }
    },
    required: ['ssh_key'],
    type: 'object',
    description: 'Response to PUT https://api.hetzner.cloud/v1/ssh_keys/{id}'
};
exports.replace_volume_requestSchema = {
    properties: {
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'New Volume name',
            example: 'database-storage',
            type: 'string'
        }
    },
    title: 'UpdateVolumeRequest',
    type: 'object',
    description: 'Request for PUT https://api.hetzner.cloud/v1/volumes/{id}'
};
exports.replace_volume_responseSchema = {
    properties: {
        volume: {
            '$ref': '#/components/schemas/volume'
        }
    },
    required: ['volume'],
    type: 'object',
    description: 'Response to PUT https://api.hetzner.cloud/v1/volumes/{id}'
};
exports.request_console_for_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        },
        password: {
            description: 'VNC password to use for this connection (this password only works in combination with a wss_url with valid token)',
            example: '9MQaTg2VAGI0FIpc10k3UpRXcHj2wQ6x',
            type: 'string'
        },
        wss_url: {
            description: 'URL of websocket proxy to use; this includes a token which is valid for a limited time only',
            example: 'wss://console.hetzner.cloud/?server_id=1&token=3db32d15-af2f-459c-8bf8-dee1fd05f49c',
            type: 'string'
        }
    },
    required: ['wss_url', 'password', 'action'],
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/request_console'
};
exports.reset_root_password_of_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        },
        root_password: {
            description: 'Password that will be set for this Server once the Action succeeds',
            example: 'zCWbFhnu950dUTko5f40',
            type: 'string'
        }
    },
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/reset_password'
};
exports.reset_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/reset'
};
exports.resize_volume_requestSchema = {
    properties: {
        size: {
            description: 'New Volume size in GB (must be greater than current size)',
            example: 50,
            type: 'number'
        }
    },
    required: ['size'],
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/volumes/{id}/actions/resize'
};
exports.resize_volume_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/volumes/{id}/actions/resize'
};
exports.resourceSchema = {
    properties: {
        id: {
            description: 'ID of the Resource. | ID of resource referenced',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        type: {
            description: 'Type of the Resource. | Type of resource referenced',
            example: 'server',
            type: 'string'
        }
    },
    required: ['id', 'type'],
    type: 'object'
};
exports.resource_idSchema = {
    properties: {
        id: {
            description: 'ID of the Server. | ID of the Server',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        }
    },
    required: ['id'],
    type: 'object',
    description: 'ID of the Resource'
};
exports.retry_issuance_or_renewal_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/certificates/{id}/actions/retry'
};
exports.routeSchema = {
    properties: {
        destination: {
            description: `Destination network or host of the route.

Packages addressed for IPs matching the destination IP prefix will be send to the specified gateway.

Must be one of
* private IPv4 ranges of RFC1918
* or \`0.0.0.0/0\`.

Must not overlap with
* an existing ip_range in any subnets
* or with any destinations in other routes
* or with \`172.31.1.1\`.

\`172.31.1.1\` is being used as a gateway for the public network interface of Servers.
`,
            example: '10.100.1.0/24',
            type: 'string'
        },
        gateway: {
            description: `Gateway of the route.

Packages addressed for the specified destination will be send to this IP address.

Cannot be
* the first IP of the networks ip_range,
* an IP behind a vSwitch or
* \`172.31.1.1\`.

\`172.31.1.1\` is being used as a gateway for the public network interface of Servers.
`,
            example: '10.0.1.1',
            type: 'string'
        }
    },
    required: ['destination', 'gateway'],
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/add_route | Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/delete_route'
};
exports.ruleSchema = {
    properties: {
        description: {
            description: 'Description of the Rule',
            maxLength: 255,
            nullable: true,
            type: 'string'
        },
        destination_ips: {
            description: `List of permitted IPv4/IPv6 addresses for outgoing traffic (\`direction\` set to \`out\`)
in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
blocks at most.

The CIDR blocks may refer to networks (with empty host bits) or single hosts.
For example, a network could be defined with \`10.0.1.0/24\` or \`2001:db8:ff00:42::/64\`,
and a single host with \`10.0.1.1/32\` or \`2001:db8:ff00:42::8329/128\`.
Use \`0.0.0.0/0\` to allow any IPv4 addresses and \`::/0\` to allow any IPv6 addresses.
`,
            example: [],
            items: {
                type: 'string'
            },
            type: 'array'
        },
        direction: {
            description: 'Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.',
            enum: ['in', 'out'],
            example: 'in',
            type: 'string'
        },
        port: {
            description: 'Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.',
            example: '80',
            type: 'string',
            nullable: true
        },
        protocol: {
            description: 'Type of traffic to allow',
            enum: ['esp', 'gre', 'icmp', 'tcp', 'udp'],
            type: 'string'
        },
        source_ips: {
            description: `List of permitted IPv4/IPv6 addresses for incoming traffic (\`direction\` set to \`in\`)
in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
blocks at most.

The CIDR blocks may refer to networks (with empty host bits) or single hosts.
For example, a network could be defined with \`10.0.1.0/24\` or \`2001:db8:ff00:42::/64\`,
and a single host with \`10.0.1.1/32\` or \`2001:db8:ff00:42::8329/128\`.
Use \`0.0.0.0/0\` to allow any IPv4 addresses and \`::/0\` to allow any IPv6 addresses.
`,
            example: ['28.239.13.1/32', '28.239.14.0/24', 'ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128'],
            items: {
                type: 'string'
            },
            type: 'array'
        }
    },
    required: ['direction', 'protocol'],
    title: 'Rule',
    type: 'object',
    description: 'Rule of a firewall.'
};
exports.selected_targetSchema = {
    properties: {
        health_status: {
            description: 'List of health statuses of the services on this target. Only present for target types "server" and "ip".',
            items: {
                '$ref': '#/components/schemas/health_status'
            },
            title: 'LoadBalancerTargetHealthStatus',
            type: 'array'
        },
        server: {
            '$ref': '#/components/schemas/resource_id'
        },
        type: {
            description: 'Type of the resource. Here always "server".',
            example: 'server',
            type: 'string'
        },
        use_private_ip: {
            default: false,
            description: 'Use the private network IP instead of the public IP. Only present for target types "server" and "label_selector".',
            title: 'LoadBalancerTargetUsePrivateIP',
            type: 'boolean'
        }
    },
    title: 'LoadBalancerTargetTarget',
    type: 'object'
};
exports.serverSchema = {
    properties: {
        backup_window: {
            description: 'Time window (UTC) in which the backup will run, or null if the backups are not enabled',
            example: '22-02',
            nullable: true,
            type: 'string'
        },
        created: {
            description: 'Point in time when the Resource was created (in ISO-8601 format).',
            example: '2016-01-30T23:55:00+00:00',
            type: 'string'
        },
        datacenter: {
            '$ref': '#/components/schemas/datacenter'
        },
        id: {
            description: 'ID of the Server.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        image: {
            '$ref': '#/components/schemas/image_optional'
        },
        included_traffic: {
            description: 'Free Traffic for the current billing period in bytes',
            example: 654321,
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        ingoing_traffic: {
            description: 'Inbound Traffic for the current billing period in bytes',
            example: 123456,
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        iso: {
            '$ref': '#/components/schemas/iso_optional'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        load_balancers: {
            description: 'Load Balancer IDs assigned to the server.',
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        },
        locked: {
            description: 'True if Server has been locked and is not available to user',
            example: false,
            type: 'boolean'
        },
        name: {
            description: 'Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)',
            example: 'my-resource',
            type: 'string'
        },
        outgoing_traffic: {
            description: 'Outbound Traffic for the current billing period in bytes',
            example: 123456,
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        placement_group: {
            description: 'The placement group the server is assigned to.',
            nullable: true,
            properties: {
                created: {
                    description: 'Point in time when the Resource was created (in ISO-8601 format).',
                    example: '2016-01-30T23:55:00+00:00',
                    type: 'string'
                },
                id: {
                    description: 'ID of the Placement Group.',
                    example: 42,
                    format: 'int64',
                    maximum: 9007199254740991,
                    type: 'integer'
                },
                labels: {
                    '$ref': '#/components/schemas/labels'
                },
                name: {
                    description: 'Name of the Resource. Must be unique per Project.',
                    example: 'my-resource',
                    type: 'string'
                },
                servers: {
                    description: 'Array of IDs of Servers that are part of this Placement Group',
                    example: [42],
                    items: {
                        format: 'int64',
                        type: 'integer'
                    },
                    type: 'array'
                },
                type: {
                    description: 'Type of the Placement Group',
                    enum: ['spread'],
                    example: 'spread',
                    type: 'string'
                }
            },
            required: ['id', 'name', 'labels', 'type', 'created', 'servers'],
            title: 'PlacementGroupNullable',
            type: 'object'
        },
        primary_disk_size: {
            description: 'Size of the primary Disk',
            example: 50,
            type: 'integer'
        },
        private_net: {
            description: 'Private networks information',
            items: {
                '$ref': '#/components/schemas/server_private_net'
            },
            type: 'array'
        },
        protection: {
            '$ref': '#/components/schemas/server_protection'
        },
        public_net: {
            '$ref': '#/components/schemas/server_public_net'
        },
        rescue_enabled: {
            description: 'True if rescue mode is enabled. Server will then boot into rescue system on next reboot',
            example: false,
            type: 'boolean'
        },
        server_type: {
            '$ref': '#/components/schemas/server_type'
        },
        status: {
            description: 'Status of the Server',
            enum: ['deleting', 'initializing', 'migrating', 'off', 'rebuilding', 'running', 'starting', 'stopping', 'unknown'],
            type: 'string'
        },
        volumes: {
            description: 'IDs of Volumes assigned to this Server',
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        }
    },
    required: ['id', 'name', 'status', 'created', 'public_net', 'private_net', 'server_type', 'datacenter', 'image', 'iso', 'rescue_enabled', 'locked', 'backup_window', 'outgoing_traffic', 'ingoing_traffic', 'included_traffic', 'protection', 'labels', 'primary_disk_size'],
    type: 'object',
    description: 'Servers are virtual machines that can be provisioned.'
};
exports.server_private_netSchema = {
    properties: {
        alias_ips: {
            description: 'Additional IP addresses of the server on the network.',
            items: {
                type: 'string'
            },
            type: 'array'
        },
        ip: {
            description: 'The server IP address on the network.',
            example: '10.0.0.2',
            type: 'string'
        },
        mac_address: {
            description: 'The server MAC address on the network.',
            example: '86:00:ff:2a:7d:e1',
            type: 'string'
        },
        network: {
            description: 'The Network ID the server is attached to.',
            example: 4711,
            format: 'int64',
            type: 'integer'
        }
    },
    type: 'object'
};
exports.server_protectionSchema = {
    description: 'Protection configuration for the Server',
    properties: {
        delete: {
            description: 'If true, prevents the Server from being deleted',
            example: false,
            type: 'boolean'
        },
        rebuild: {
            description: 'If true, prevents the Server from being rebuilt',
            example: false,
            type: 'boolean'
        }
    },
    required: ['delete', 'rebuild'],
    type: 'object'
};
exports.server_public_netSchema = {
    description: "Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`",
    properties: {
        firewalls: {
            description: 'Firewalls applied to the public network interface of this Server',
            items: {
                properties: {
                    id: {
                        description: 'ID of the Firewall.',
                        example: 42,
                        format: 'int64',
                        maximum: 9007199254740991,
                        type: 'integer'
                    },
                    status: {
                        description: 'Status of the Firewall on the Server',
                        enum: ['applied', 'pending'],
                        example: 'applied',
                        type: 'string'
                    }
                },
                title: 'ServerPublicNetFirewall',
                type: 'object'
            },
            type: 'array'
        },
        floating_ips: {
            description: 'IDs of Floating IPs assigned to this Server',
            example: [478],
            items: {
                format: 'int64',
                type: 'integer'
            },
            type: 'array'
        },
        ipv4: {
            '$ref': '#/components/schemas/ipv4'
        },
        ipv6: {
            '$ref': '#/components/schemas/ipv6'
        }
    },
    required: ['ipv4', 'ipv6', 'floating_ips'],
    type: 'object'
};
exports.server_typeSchema = {
    properties: {
        architecture: {
            '$ref': '#/components/schemas/architecture'
        },
        cores: {
            description: 'Number of cpu cores a Server of this type will have',
            example: 1,
            type: 'integer'
        },
        cpu_type: {
            description: 'Type of cpu',
            enum: ['dedicated', 'shared'],
            type: 'string'
        },
        deprecated: {
            description: 'This field is deprecated. Use the deprecation object instead',
            example: false,
            type: 'boolean',
            nullable: true
        },
        deprecation: {
            '$ref': '#/components/schemas/deprecation_info'
        },
        description: {
            description: 'Description of the Server type',
            example: 'CX11',
            type: 'string'
        },
        disk: {
            description: 'Disk size a Server of this type will have in GB',
            example: 24,
            type: 'number'
        },
        id: {
            description: 'ID of the Server type',
            example: 1,
            format: 'int64',
            type: 'integer',
            maximum: 9007199254740991
        },
        included_traffic: {
            deprecated: true,
            description: `**Deprecated**: This field is deprecated and set to \`null\` since 5 August 2024.
Please refer to the \`included_traffic\` field in \`prices\` instead.
Learn more about this change in [the Changelog](https://docs.hetzner.cloud/changelog#2024-07-25-cloud-api-returns-traffic-information-in-different-format).
`,
            example: null,
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        memory: {
            description: 'Memory a Server of this type will have in GB',
            example: 1,
            type: 'number'
        },
        name: {
            description: 'Unique identifier of the Server type',
            example: 'cx11',
            type: 'string'
        },
        prices: {
            description: 'Prices in different Locations',
            items: {
                '$ref': '#/components/schemas/price_per_time'
            },
            type: 'array'
        },
        storage_type: {
            description: 'Type of Server boot drive. Local has higher speed. Network has better availability.',
            enum: ['local', 'network'],
            type: 'string'
        }
    },
    required: ['id', 'name', 'description', 'cores', 'memory', 'disk', 'deprecated', 'prices', 'storage_type', 'cpu_type', 'architecture', 'included_traffic'],
    type: 'object'
};
exports.set_rules_requestSchema = {
    properties: {
        rules: {
            description: `Array of rules.

Limited to a maximum of 50 rules per Firewall.
`,
            items: {
                '$ref': '#/components/schemas/rule'
            },
            maxItems: 50,
            type: 'array'
        }
    },
    required: ['rules'],
    title: 'SetRulesRequest',
    type: 'object',
    description: 'Request for POST https://api.hetzner.cloud/v1/firewalls/{id}/actions/set_rules'
};
exports.set_rules_responseSchema = {
    properties: {
        actions: {
            items: {
                '$ref': '#/components/schemas/action'
            },
            type: 'array'
        }
    },
    required: ['actions'],
    title: 'ActionListResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/firewalls/{id}/actions/set_rules'
};
exports.shutdown_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/shutdown'
};
exports.soft_reboot_server_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/reboot'
};
exports.ssh_keySchema = {
    properties: {
        created: {
            description: 'Point in time when the Resource was created (in ISO-8601 format).',
            example: '2016-01-30T23:55:00+00:00',
            type: 'string'
        },
        fingerprint: {
            description: 'Fingerprint of public key',
            example: 'b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f',
            type: 'string'
        },
        id: {
            description: 'ID of the SSH Key.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        name: {
            description: 'Name of the Resource. Must be unique per Project.',
            example: 'my-resource',
            type: 'string'
        },
        public_key: {
            description: 'Public key',
            example: 'ssh-rsa AAAjjk76kgf...Xt',
            type: 'string'
        }
    },
    required: ['id', 'name', 'fingerprint', 'public_key', 'labels', 'created'],
    type: 'object',
    description: 'SSH keys are public keys you provide to the cloud system. They can be injected into Servers at creation time. We highly recommend that you use keys instead of passwords to manage your Servers.'
};
exports.subnetSchema = {
    properties: {
        ip_range: {
            description: `IP range in CIDR block notation of the whole subnetwork.

Must be a subnet of the parent Network \`ip_range\`.

Must not overlap with any other subnets or with any destinations in routes.

Minimum network size is /30. We highly recommend that you pick a larger network with a /24 netmask.
`,
            example: '10.0.1.0/24',
            type: 'string'
        },
        network_zone: {
            description: `Name of Network zone.

The Location object contains the \`network_zone\` property each Location belongs to.
 | Name of Network Zone.

The Location object contains the \`network_zone\` it belongs to.
`,
            example: 'eu-central',
            type: 'string'
        },
        type: {
            description: `Type of Subnetwork.

- \`cloud\` - Used to connect cloud servers and load balancers.
- \`server\` - Same as the \`cloud\` type. **Deprecated**, use the \`cloud\` type instead.
- \`vswitch\` - Used to [connect cloud servers and load balancers with dedicated servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch).
`,
            enum: ['cloud', 'server', 'vswitch'],
            type: 'string'
        },
        vswitch_id: {
            description: `ID of the robot vSwitch.

Must only be supplied for subnets of type vswitch.
 | ID of the robot vSwitch.

Must be supplied if the Subnet is of type \`vswitch\`.
`,
            example: 1000,
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['type', 'network_zone'],
    type: 'object',
    description: 'Subnets divide the ip_range from the parent Network object into multiple Subnetworks that you can use for different specific purposes.'
};
exports.subnet_with_gatewaySchema = {
    properties: {
        gateway: {
            description: 'Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range.',
            example: '10.0.0.1',
            type: 'string'
        },
        ip_range: {
            description: 'IP range in CIDR block notation of the whole subnetwork.',
            example: '10.0.1.0/24',
            type: 'string'
        },
        network_zone: {
            description: 'Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.',
            example: 'eu-central',
            type: 'string'
        },
        type: {
            description: `Type of Subnetwork.

- \`cloud\` - Used to connect cloud servers and load balancers.
- \`server\` - Same as the \`cloud\` type. **Deprecated**, use the \`cloud\` type instead.
- \`vswitch\` - Used to [connect cloud servers and load balancers with dedicated servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch).
`,
            enum: ['cloud', 'server', 'vswitch'],
            type: 'string'
        },
        vswitch_id: {
            description: 'ID of the robot vSwitch if the subnet is of type vswitch.',
            example: 1000,
            format: 'int64',
            nullable: true,
            type: 'integer'
        }
    },
    required: ['type', 'network_zone', 'gateway'],
    type: 'object'
};
exports.targetSchema = {
    properties: {
        health_status: {
            description: 'List of health statuses of the services on this target. Only present for target types "server" and "ip".',
            items: {
                '$ref': '#/components/schemas/health_status'
            },
            title: 'LoadBalancerTargetHealthStatus',
            type: 'array'
        },
        ip: {
            description: 'IP targets where the traffic should be routed to. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only present for target type "ip".',
            properties: {
                ip: {
                    description: 'IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a Subnetwork type vswitch.',
                    example: '203.0.113.1',
                    type: 'string'
                }
            },
            required: ['ip'],
            title: 'LoadBalancerTargetIP',
            type: 'object'
        },
        label_selector: {
            '$ref': '#/components/schemas/label_selector'
        },
        server: {
            '$ref': '#/components/schemas/resource_id'
        },
        targets: {
            description: 'List of resolved label selector target Servers. Only present for type "label_selector".',
            items: {
                '$ref': '#/components/schemas/selected_target'
            },
            type: 'array'
        },
        type: {
            description: 'Type of the resource',
            enum: ['ip', 'label_selector', 'server'],
            type: 'string'
        },
        use_private_ip: {
            default: false,
            description: 'Use the private network IP instead of the public IP. Only present for target types "server" and "label_selector".',
            title: 'LoadBalancerTargetUsePrivateIP',
            type: 'boolean'
        }
    },
    required: ['type'],
    title: 'LoadBalancerTarget',
    type: 'object',
    description: 'A target for a load balancer'
};
exports.unassign_floating_ip_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/unassign'
};
exports.unassign_primary_ip_from_resource_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/primary_ips/{id}/actions/unassign'
};
exports.update_load_balancer_serviceSchema = {
    properties: {
        destination_port: {
            description: 'Port the Load Balancer will balance to',
            example: 80,
            type: 'integer'
        },
        health_check: {
            additionalProperties: false,
            description: 'Service health check',
            properties: {
                http: {
                    additionalProperties: false,
                    description: 'Additional configuration for protocol http',
                    properties: {
                        domain: {
                            description: 'Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.',
                            example: 'example.com',
                            nullable: true,
                            type: 'string'
                        },
                        path: {
                            description: 'HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.',
                            example: '/',
                            type: 'string'
                        },
                        response: {
                            description: 'String that must be contained in HTTP response in order to pass the health check',
                            example: '{"status": "ok"}',
                            type: 'string'
                        },
                        status_codes: {
                            default: ['2??', '3??'],
                            description: 'List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones.',
                            example: ['2??', '3??'],
                            items: {
                                type: 'string'
                            },
                            type: 'array'
                        },
                        tls: {
                            description: 'Use HTTPS for health check',
                            example: false,
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                interval: {
                    description: 'Time interval in seconds health checks are performed',
                    example: 15,
                    type: 'integer'
                },
                port: {
                    description: 'Port the health check will be performed on',
                    example: 4711,
                    type: 'integer'
                },
                protocol: {
                    description: 'Type of the health check',
                    enum: ['http', 'tcp'],
                    example: 'http',
                    type: 'string'
                },
                retries: {
                    description: 'Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again',
                    example: 3,
                    type: 'integer'
                },
                timeout: {
                    description: 'Time in seconds after an attempt is considered a timeout',
                    example: 10,
                    type: 'integer'
                }
            },
            title: 'UpdateLoadBalancerServiceHealthCheck',
            type: 'object'
        },
        http: {
            '$ref': '#/components/schemas/http'
        },
        listen_port: {
            description: 'Port the Load Balancer listens on',
            example: 443,
            type: 'integer'
        },
        protocol: {
            description: 'Protocol of the Load Balancer',
            enum: ['http', 'https', 'tcp'],
            example: 'https',
            type: 'string'
        },
        proxyprotocol: {
            description: 'Is Proxyprotocol enabled or not',
            example: false,
            type: 'boolean'
        }
    },
    required: ['listen_port'],
    title: 'UpdateLoadBalancerService',
    type: 'object',
    description: 'An update to a service for a Load Balancer.'
};
exports.update_service_requestSchema = {
    '$ref': '#/components/schemas/update_load_balancer_service'
};
exports.update_service_responseSchema = {
    properties: {
        action: {
            '$ref': '#/components/schemas/action'
        }
    },
    required: ['action'],
    title: 'ActionResponse',
    type: 'object',
    description: 'Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/update_service'
};
exports.volumeSchema = {
    properties: {
        created: {
            description: 'Point in time when the Resource was created (in ISO-8601 format).',
            example: '2016-01-30T23:55:00+00:00',
            type: 'string'
        },
        format: {
            description: 'Filesystem of the Volume if formatted on creation, null if not formatted on creation',
            example: 'xfs',
            nullable: true,
            type: 'string'
        },
        id: {
            description: 'ID of the Volume.',
            example: 42,
            format: 'int64',
            maximum: 9007199254740991,
            type: 'integer'
        },
        labels: {
            '$ref': '#/components/schemas/labels'
        },
        linux_device: {
            description: 'Device path on the file system for the Volume',
            example: '/dev/disk/by-id/scsi-0HC_Volume_4711',
            type: 'string'
        },
        location: {
            '$ref': '#/components/schemas/location'
        },
        name: {
            description: 'Name of the Resource. Must be unique per Project.',
            example: 'my-resource',
            type: 'string'
        },
        protection: {
            '$ref': '#/components/schemas/protection'
        },
        server: {
            description: 'ID of the Server the Volume is attached to, null if it is not attached at all',
            example: 12,
            format: 'int64',
            nullable: true,
            type: 'integer'
        },
        size: {
            description: 'Size in GB of the Volume',
            example: 42,
            type: 'number'
        },
        status: {
            description: 'Current status of the Volume',
            enum: ['available', 'creating'],
            example: 'available',
            type: 'string'
        }
    },
    required: ['id', 'created', 'name', 'server', 'location', 'size', 'linux_device', 'protection', 'labels', 'status', 'format'],
    type: 'object',
    description: 'A Volume is a highly-available, scalable, and SSD-based block storage for Servers. Pricing for Volumes depends on the Volume size and Location, not the actual used storage. Please see [Hetzner Wiki](https://wiki.hetzner.de/index.php/CloudServer/en#Volumes) for more details about Volumes.'
};
